# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:36:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AcceptMatchOutput(BaseModel):
    pass


class AcceptanceType(Enum):
    ACCEPT = 'ACCEPT'
    REJECT = 'REJECT'


class AliasArn(RootModel[constr(pattern=r'^arn:.*:alias\/alias-\S+')]):
    root: constr(pattern=r'^arn:.*:alias\/alias-\S+')


class AliasId(RootModel[constr(pattern=r'^alias-\S+')]):
    root: constr(pattern=r'^alias-\S+')


class AliasIdOrArn(RootModel[constr(pattern=r'^alias-\S+|^arn:.*:alias\/alias-\S+')]):
    root: constr(pattern=r'^alias-\S+|^arn:.*:alias\/alias-\S+')


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class ArnStringModel(
    RootModel[constr(pattern=r'[a-zA-Z0-9:/-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9:/-]+', min_length=1, max_length=256)


class AutoScalingGroupArn(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class BackfillMode(Enum):
    AUTOMATIC = 'AUTOMATIC'
    MANUAL = 'MANUAL'


class BalancingStrategy(Enum):
    SPOT_ONLY = 'SPOT_ONLY'
    SPOT_PREFERRED = 'SPOT_PREFERRED'
    ON_DEMAND_ONLY = 'ON_DEMAND_ONLY'


class BooleanModel(RootModel[bool]):
    root: bool


class BuildArn(RootModel[constr(pattern=r'^arn:.*:build\/build-\S+')]):
    root: constr(pattern=r'^arn:.*:build\/build-\S+')


class BuildId(RootModel[constr(pattern=r'^build-\S+')]):
    root: constr(pattern=r'^build-\S+')


class BuildIdOrArn(RootModel[constr(pattern=r'^build-\S+|^arn:.*:build\/build-\S+')]):
    root: constr(pattern=r'^build-\S+|^arn:.*:build\/build-\S+')


class BuildStatus(Enum):
    INITIALIZED = 'INITIALIZED'
    READY = 'READY'
    FAILED = 'FAILED'


class CertificateType(Enum):
    DISABLED = 'DISABLED'
    GENERATED = 'GENERATED'


class ComparisonOperatorType(Enum):
    GreaterThanOrEqualToThreshold = 'GreaterThanOrEqualToThreshold'
    GreaterThanThreshold = 'GreaterThanThreshold'
    LessThanThreshold = 'LessThanThreshold'
    LessThanOrEqualToThreshold = 'LessThanOrEqualToThreshold'


class ComputeArn(
    RootModel[constr(pattern=r'^arn:.*:compute\/[a-zA-Z0-9\-]+', max_length=1024)]
):
    root: constr(pattern=r'^arn:.*:compute\/[a-zA-Z0-9\-]+', max_length=1024)


class ComputeAuthToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\-]+', min_length=1, max_length=64)


class ComputeName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\-]+', min_length=1, max_length=128)


class ComputeNameOrArn(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9\-]+|^arn:.*:compute\/[a-zA-Z0-9\-]+', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9\-]+|^arn:.*:compute\/[a-zA-Z0-9\-]+', max_length=1024
    )


class ComputeStatus(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    TERMINATING = 'TERMINATING'


class ComputeType(Enum):
    EC2 = 'EC2'
    ANYWHERE = 'ANYWHERE'


class ConflictException(RootModel[Any]):
    root: Any


class CreateVpcPeeringConnectionOutput(BaseModel):
    pass


class CustomEventData(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class CustomInputLocationStringModel(
    RootModel[constr(pattern=r'^custom-[A-Za-z0-9\-]+', min_length=8, max_length=64)]
):
    root: constr(pattern=r'^custom-[A-Za-z0-9\-]+', min_length=8, max_length=64)


class CustomLocationNameOrArnModel(
    RootModel[
        constr(
            pattern=r'^custom-[A-Za-z0-9\-]+|^arn:.*:location\/custom-\S+',
            min_length=1,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^custom-[A-Za-z0-9\-]+|^arn:.*:location\/custom-\S+',
        min_length=1,
        max_length=128,
    )


class DeleteAliasInput(BaseModel):
    AliasId: AliasIdOrArn


class DeleteBuildInput(BaseModel):
    BuildId: BuildIdOrArn


class DeleteGameSessionQueueOutput(BaseModel):
    pass


class DeleteLocationInput(BaseModel):
    LocationName: CustomLocationNameOrArnModel


class DeleteLocationOutput(BaseModel):
    pass


class DeleteMatchmakingConfigurationOutput(BaseModel):
    pass


class DeleteMatchmakingRuleSetOutput(BaseModel):
    pass


class DeleteVpcPeeringAuthorizationOutput(BaseModel):
    pass


class DeleteVpcPeeringConnectionOutput(BaseModel):
    pass


class DeregisterComputeOutput(BaseModel):
    pass


class DescribeAliasInput(BaseModel):
    AliasId: AliasIdOrArn


class DescribeBuildInput(BaseModel):
    BuildId: BuildIdOrArn


class DescribeVpcPeeringAuthorizationsInput(BaseModel):
    pass


class DnsName(RootModel[str]):
    root: str


class DnsNameInput(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_\-\.]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_\-\.]+', min_length=1, max_length=256)


class Double(RootModel[float]):
    root: float


class DoubleObject(RootModel[float]):
    root: float


class EC2InstanceType(Enum):
    t2_micro = 't2.micro'
    t2_small = 't2.small'
    t2_medium = 't2.medium'
    t2_large = 't2.large'
    c3_large = 'c3.large'
    c3_xlarge = 'c3.xlarge'
    c3_2xlarge = 'c3.2xlarge'
    c3_4xlarge = 'c3.4xlarge'
    c3_8xlarge = 'c3.8xlarge'
    c4_large = 'c4.large'
    c4_xlarge = 'c4.xlarge'
    c4_2xlarge = 'c4.2xlarge'
    c4_4xlarge = 'c4.4xlarge'
    c4_8xlarge = 'c4.8xlarge'
    c5_large = 'c5.large'
    c5_xlarge = 'c5.xlarge'
    c5_2xlarge = 'c5.2xlarge'
    c5_4xlarge = 'c5.4xlarge'
    c5_9xlarge = 'c5.9xlarge'
    c5_12xlarge = 'c5.12xlarge'
    c5_18xlarge = 'c5.18xlarge'
    c5_24xlarge = 'c5.24xlarge'
    c5a_large = 'c5a.large'
    c5a_xlarge = 'c5a.xlarge'
    c5a_2xlarge = 'c5a.2xlarge'
    c5a_4xlarge = 'c5a.4xlarge'
    c5a_8xlarge = 'c5a.8xlarge'
    c5a_12xlarge = 'c5a.12xlarge'
    c5a_16xlarge = 'c5a.16xlarge'
    c5a_24xlarge = 'c5a.24xlarge'
    r3_large = 'r3.large'
    r3_xlarge = 'r3.xlarge'
    r3_2xlarge = 'r3.2xlarge'
    r3_4xlarge = 'r3.4xlarge'
    r3_8xlarge = 'r3.8xlarge'
    r4_large = 'r4.large'
    r4_xlarge = 'r4.xlarge'
    r4_2xlarge = 'r4.2xlarge'
    r4_4xlarge = 'r4.4xlarge'
    r4_8xlarge = 'r4.8xlarge'
    r4_16xlarge = 'r4.16xlarge'
    r5_large = 'r5.large'
    r5_xlarge = 'r5.xlarge'
    r5_2xlarge = 'r5.2xlarge'
    r5_4xlarge = 'r5.4xlarge'
    r5_8xlarge = 'r5.8xlarge'
    r5_12xlarge = 'r5.12xlarge'
    r5_16xlarge = 'r5.16xlarge'
    r5_24xlarge = 'r5.24xlarge'
    r5a_large = 'r5a.large'
    r5a_xlarge = 'r5a.xlarge'
    r5a_2xlarge = 'r5a.2xlarge'
    r5a_4xlarge = 'r5a.4xlarge'
    r5a_8xlarge = 'r5a.8xlarge'
    r5a_12xlarge = 'r5a.12xlarge'
    r5a_16xlarge = 'r5a.16xlarge'
    r5a_24xlarge = 'r5a.24xlarge'
    m3_medium = 'm3.medium'
    m3_large = 'm3.large'
    m3_xlarge = 'm3.xlarge'
    m3_2xlarge = 'm3.2xlarge'
    m4_large = 'm4.large'
    m4_xlarge = 'm4.xlarge'
    m4_2xlarge = 'm4.2xlarge'
    m4_4xlarge = 'm4.4xlarge'
    m4_10xlarge = 'm4.10xlarge'
    m5_large = 'm5.large'
    m5_xlarge = 'm5.xlarge'
    m5_2xlarge = 'm5.2xlarge'
    m5_4xlarge = 'm5.4xlarge'
    m5_8xlarge = 'm5.8xlarge'
    m5_12xlarge = 'm5.12xlarge'
    m5_16xlarge = 'm5.16xlarge'
    m5_24xlarge = 'm5.24xlarge'
    m5a_large = 'm5a.large'
    m5a_xlarge = 'm5a.xlarge'
    m5a_2xlarge = 'm5a.2xlarge'
    m5a_4xlarge = 'm5a.4xlarge'
    m5a_8xlarge = 'm5a.8xlarge'
    m5a_12xlarge = 'm5a.12xlarge'
    m5a_16xlarge = 'm5a.16xlarge'
    m5a_24xlarge = 'm5a.24xlarge'
    c5d_large = 'c5d.large'
    c5d_xlarge = 'c5d.xlarge'
    c5d_2xlarge = 'c5d.2xlarge'
    c5d_4xlarge = 'c5d.4xlarge'
    c5d_9xlarge = 'c5d.9xlarge'
    c5d_12xlarge = 'c5d.12xlarge'
    c5d_18xlarge = 'c5d.18xlarge'
    c5d_24xlarge = 'c5d.24xlarge'
    c6a_large = 'c6a.large'
    c6a_xlarge = 'c6a.xlarge'
    c6a_2xlarge = 'c6a.2xlarge'
    c6a_4xlarge = 'c6a.4xlarge'
    c6a_8xlarge = 'c6a.8xlarge'
    c6a_12xlarge = 'c6a.12xlarge'
    c6a_16xlarge = 'c6a.16xlarge'
    c6a_24xlarge = 'c6a.24xlarge'
    c6i_large = 'c6i.large'
    c6i_xlarge = 'c6i.xlarge'
    c6i_2xlarge = 'c6i.2xlarge'
    c6i_4xlarge = 'c6i.4xlarge'
    c6i_8xlarge = 'c6i.8xlarge'
    c6i_12xlarge = 'c6i.12xlarge'
    c6i_16xlarge = 'c6i.16xlarge'
    c6i_24xlarge = 'c6i.24xlarge'
    r5d_large = 'r5d.large'
    r5d_xlarge = 'r5d.xlarge'
    r5d_2xlarge = 'r5d.2xlarge'
    r5d_4xlarge = 'r5d.4xlarge'
    r5d_8xlarge = 'r5d.8xlarge'
    r5d_12xlarge = 'r5d.12xlarge'
    r5d_16xlarge = 'r5d.16xlarge'
    r5d_24xlarge = 'r5d.24xlarge'


class EventCode(Enum):
    GENERIC_EVENT = 'GENERIC_EVENT'
    FLEET_CREATED = 'FLEET_CREATED'
    FLEET_DELETED = 'FLEET_DELETED'
    FLEET_SCALING_EVENT = 'FLEET_SCALING_EVENT'
    FLEET_STATE_DOWNLOADING = 'FLEET_STATE_DOWNLOADING'
    FLEET_STATE_VALIDATING = 'FLEET_STATE_VALIDATING'
    FLEET_STATE_BUILDING = 'FLEET_STATE_BUILDING'
    FLEET_STATE_ACTIVATING = 'FLEET_STATE_ACTIVATING'
    FLEET_STATE_ACTIVE = 'FLEET_STATE_ACTIVE'
    FLEET_STATE_ERROR = 'FLEET_STATE_ERROR'
    FLEET_INITIALIZATION_FAILED = 'FLEET_INITIALIZATION_FAILED'
    FLEET_BINARY_DOWNLOAD_FAILED = 'FLEET_BINARY_DOWNLOAD_FAILED'
    FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND = 'FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND'
    FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE = (
        'FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE'
    )
    FLEET_VALIDATION_TIMED_OUT = 'FLEET_VALIDATION_TIMED_OUT'
    FLEET_ACTIVATION_FAILED = 'FLEET_ACTIVATION_FAILED'
    FLEET_ACTIVATION_FAILED_NO_INSTANCES = 'FLEET_ACTIVATION_FAILED_NO_INSTANCES'
    FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED = (
        'FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED'
    )
    SERVER_PROCESS_INVALID_PATH = 'SERVER_PROCESS_INVALID_PATH'
    SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT = (
        'SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT'
    )
    SERVER_PROCESS_PROCESS_READY_TIMEOUT = 'SERVER_PROCESS_PROCESS_READY_TIMEOUT'
    SERVER_PROCESS_CRASHED = 'SERVER_PROCESS_CRASHED'
    SERVER_PROCESS_TERMINATED_UNHEALTHY = 'SERVER_PROCESS_TERMINATED_UNHEALTHY'
    SERVER_PROCESS_FORCE_TERMINATED = 'SERVER_PROCESS_FORCE_TERMINATED'
    SERVER_PROCESS_PROCESS_EXIT_TIMEOUT = 'SERVER_PROCESS_PROCESS_EXIT_TIMEOUT'
    GAME_SESSION_ACTIVATION_TIMEOUT = 'GAME_SESSION_ACTIVATION_TIMEOUT'
    FLEET_CREATION_EXTRACTING_BUILD = 'FLEET_CREATION_EXTRACTING_BUILD'
    FLEET_CREATION_RUNNING_INSTALLER = 'FLEET_CREATION_RUNNING_INSTALLER'
    FLEET_CREATION_VALIDATING_RUNTIME_CONFIG = (
        'FLEET_CREATION_VALIDATING_RUNTIME_CONFIG'
    )
    FLEET_VPC_PEERING_SUCCEEDED = 'FLEET_VPC_PEERING_SUCCEEDED'
    FLEET_VPC_PEERING_FAILED = 'FLEET_VPC_PEERING_FAILED'
    FLEET_VPC_PEERING_DELETED = 'FLEET_VPC_PEERING_DELETED'
    INSTANCE_INTERRUPTED = 'INSTANCE_INTERRUPTED'
    INSTANCE_RECYCLED = 'INSTANCE_RECYCLED'


class FleetAction(Enum):
    AUTO_SCALING = 'AUTO_SCALING'


class FleetActionList(RootModel[List[FleetAction]]):
    root: List[FleetAction] = Field(..., max_length=1, min_length=1)


class FleetArn(RootModel[constr(pattern=r'^arn:.*:fleet\/fleet-\S+')]):
    root: constr(pattern=r'^arn:.*:fleet\/fleet-\S+')


class FleetCapacityExceededException(RootModel[Any]):
    root: Any


class FleetId(RootModel[constr(pattern=r'^fleet-\S+')]):
    root: constr(pattern=r'^fleet-\S+')


class FleetIdList(RootModel[List[FleetId]]):
    root: List[FleetId] = Field(..., min_length=1)


class FleetIdOrArn(RootModel[constr(pattern=r'^fleet-\S+|^arn:.*:fleet\/fleet-\S+')]):
    root: constr(pattern=r'^fleet-\S+|^arn:.*:fleet\/fleet-\S+')


class FleetIdOrArnList(RootModel[List[FleetIdOrArn]]):
    root: List[FleetIdOrArn] = Field(..., min_length=1)


class FleetStatus(Enum):
    NEW = 'NEW'
    DOWNLOADING = 'DOWNLOADING'
    VALIDATING = 'VALIDATING'
    BUILDING = 'BUILDING'
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    ERROR = 'ERROR'
    TERMINATED = 'TERMINATED'
    NOT_FOUND = 'NOT_FOUND'


class FleetType(Enum):
    ON_DEMAND = 'ON_DEMAND'
    SPOT = 'SPOT'


class FlexMatchMode(Enum):
    STANDALONE = 'STANDALONE'
    WITH_QUEUE = 'WITH_QUEUE'


class Float(RootModel[float]):
    root: float


class FreeText(RootModel[str]):
    root: str


class GameLiftServiceSdkEndpointOutput(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class GamePropertyKey(RootModel[constr(max_length=32)]):
    root: constr(max_length=32)


class GamePropertyValue(RootModel[constr(max_length=96)]):
    root: constr(max_length=96)


class GameServerClaimStatus(Enum):
    CLAIMED = 'CLAIMED'


class GameServerConnectionInfo(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=512)


class GameServerData(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class GameServerGroupAction(Enum):
    REPLACE_INSTANCE_TYPES = 'REPLACE_INSTANCE_TYPES'


class GameServerGroupActions(RootModel[List[GameServerGroupAction]]):
    root: List[GameServerGroupAction] = Field(..., max_length=1, min_length=1)


class GameServerGroupArn(
    RootModel[
        constr(
            pattern=r'^arn:.*:gameservergroup\/[a-zA-Z0-9-\.]*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:.*:gameservergroup\/[a-zA-Z0-9-\.]*',
        min_length=1,
        max_length=256,
    )


class GameServerGroupDeleteOption(Enum):
    SAFE_DELETE = 'SAFE_DELETE'
    FORCE_DELETE = 'FORCE_DELETE'
    RETAIN = 'RETAIN'


class GameServerGroupInstanceType(Enum):
    c4_large = 'c4.large'
    c4_xlarge = 'c4.xlarge'
    c4_2xlarge = 'c4.2xlarge'
    c4_4xlarge = 'c4.4xlarge'
    c4_8xlarge = 'c4.8xlarge'
    c5_large = 'c5.large'
    c5_xlarge = 'c5.xlarge'
    c5_2xlarge = 'c5.2xlarge'
    c5_4xlarge = 'c5.4xlarge'
    c5_9xlarge = 'c5.9xlarge'
    c5_12xlarge = 'c5.12xlarge'
    c5_18xlarge = 'c5.18xlarge'
    c5_24xlarge = 'c5.24xlarge'
    c5a_large = 'c5a.large'
    c5a_xlarge = 'c5a.xlarge'
    c5a_2xlarge = 'c5a.2xlarge'
    c5a_4xlarge = 'c5a.4xlarge'
    c5a_8xlarge = 'c5a.8xlarge'
    c5a_12xlarge = 'c5a.12xlarge'
    c5a_16xlarge = 'c5a.16xlarge'
    c5a_24xlarge = 'c5a.24xlarge'
    c6g_medium = 'c6g.medium'
    c6g_large = 'c6g.large'
    c6g_xlarge = 'c6g.xlarge'
    c6g_2xlarge = 'c6g.2xlarge'
    c6g_4xlarge = 'c6g.4xlarge'
    c6g_8xlarge = 'c6g.8xlarge'
    c6g_12xlarge = 'c6g.12xlarge'
    c6g_16xlarge = 'c6g.16xlarge'
    r4_large = 'r4.large'
    r4_xlarge = 'r4.xlarge'
    r4_2xlarge = 'r4.2xlarge'
    r4_4xlarge = 'r4.4xlarge'
    r4_8xlarge = 'r4.8xlarge'
    r4_16xlarge = 'r4.16xlarge'
    r5_large = 'r5.large'
    r5_xlarge = 'r5.xlarge'
    r5_2xlarge = 'r5.2xlarge'
    r5_4xlarge = 'r5.4xlarge'
    r5_8xlarge = 'r5.8xlarge'
    r5_12xlarge = 'r5.12xlarge'
    r5_16xlarge = 'r5.16xlarge'
    r5_24xlarge = 'r5.24xlarge'
    r5a_large = 'r5a.large'
    r5a_xlarge = 'r5a.xlarge'
    r5a_2xlarge = 'r5a.2xlarge'
    r5a_4xlarge = 'r5a.4xlarge'
    r5a_8xlarge = 'r5a.8xlarge'
    r5a_12xlarge = 'r5a.12xlarge'
    r5a_16xlarge = 'r5a.16xlarge'
    r5a_24xlarge = 'r5a.24xlarge'
    r6g_medium = 'r6g.medium'
    r6g_large = 'r6g.large'
    r6g_xlarge = 'r6g.xlarge'
    r6g_2xlarge = 'r6g.2xlarge'
    r6g_4xlarge = 'r6g.4xlarge'
    r6g_8xlarge = 'r6g.8xlarge'
    r6g_12xlarge = 'r6g.12xlarge'
    r6g_16xlarge = 'r6g.16xlarge'
    m4_large = 'm4.large'
    m4_xlarge = 'm4.xlarge'
    m4_2xlarge = 'm4.2xlarge'
    m4_4xlarge = 'm4.4xlarge'
    m4_10xlarge = 'm4.10xlarge'
    m5_large = 'm5.large'
    m5_xlarge = 'm5.xlarge'
    m5_2xlarge = 'm5.2xlarge'
    m5_4xlarge = 'm5.4xlarge'
    m5_8xlarge = 'm5.8xlarge'
    m5_12xlarge = 'm5.12xlarge'
    m5_16xlarge = 'm5.16xlarge'
    m5_24xlarge = 'm5.24xlarge'
    m5a_large = 'm5a.large'
    m5a_xlarge = 'm5a.xlarge'
    m5a_2xlarge = 'm5a.2xlarge'
    m5a_4xlarge = 'm5a.4xlarge'
    m5a_8xlarge = 'm5a.8xlarge'
    m5a_12xlarge = 'm5a.12xlarge'
    m5a_16xlarge = 'm5a.16xlarge'
    m5a_24xlarge = 'm5a.24xlarge'
    m6g_medium = 'm6g.medium'
    m6g_large = 'm6g.large'
    m6g_xlarge = 'm6g.xlarge'
    m6g_2xlarge = 'm6g.2xlarge'
    m6g_4xlarge = 'm6g.4xlarge'
    m6g_8xlarge = 'm6g.8xlarge'
    m6g_12xlarge = 'm6g.12xlarge'
    m6g_16xlarge = 'm6g.16xlarge'


class GameServerGroupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-\.]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9-\.]+', min_length=1, max_length=128)


class GameServerGroupNameOrArn(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9-\.]+|^arn:.*:gameservergroup\/[a-zA-Z0-9-\.]+',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9-\.]+|^arn:.*:gameservergroup\/[a-zA-Z0-9-\.]+',
        min_length=1,
        max_length=256,
    )


class GameServerGroupStatus(Enum):
    NEW = 'NEW'
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    DELETE_SCHEDULED = 'DELETE_SCHEDULED'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    ERROR = 'ERROR'


class GameServerHealthCheck(Enum):
    HEALTHY = 'HEALTHY'


class GameServerId(
    RootModel[constr(pattern=r'[a-zA-Z0-9-\.]+', min_length=3, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9-\.]+', min_length=3, max_length=128)


class GameServerInstanceId(
    RootModel[constr(pattern=r'^i-[0-9a-zA-Z]{17}$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^i-[0-9a-zA-Z]{17}$', min_length=19, max_length=19)


class GameServerInstanceIds(RootModel[List[GameServerInstanceId]]):
    root: List[GameServerInstanceId] = Field(..., max_length=20, min_length=1)


class GameServerInstanceStatus(Enum):
    ACTIVE = 'ACTIVE'
    DRAINING = 'DRAINING'
    SPOT_TERMINATING = 'SPOT_TERMINATING'


class GameServerProtectionPolicy(Enum):
    NO_PROTECTION = 'NO_PROTECTION'
    FULL_PROTECTION = 'FULL_PROTECTION'


class GameServerUtilizationStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    UTILIZED = 'UTILIZED'


class GameSessionActivationTimeoutSeconds(RootModel[conint(ge=1, le=600)]):
    root: conint(ge=1, le=600)


class GameSessionData(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class GameSessionFullException(RootModel[Any]):
    root: Any


class GameSessionPlacementState(Enum):
    PENDING = 'PENDING'
    FULFILLED = 'FULFILLED'
    CANCELLED = 'CANCELLED'
    TIMED_OUT = 'TIMED_OUT'
    FAILED = 'FAILED'


class GameSessionQueueArn(
    RootModel[
        constr(
            pattern=r'^arn:.*:gamesessionqueue\/[a-zA-Z0-9-]+',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:.*:gamesessionqueue\/[a-zA-Z0-9-]+', min_length=1, max_length=256
    )


class GameSessionQueueDestination(BaseModel):
    DestinationArn: Optional[ArnStringModel] = None


class GameSessionQueueDestinationList(RootModel[List[GameSessionQueueDestination]]):
    root: List[GameSessionQueueDestination]


class GameSessionQueueName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=128)


class GameSessionQueueNameOrArn(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\/[a-zA-Z0-9-]+',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\/[a-zA-Z0-9-]+',
        min_length=1,
        max_length=256,
    )


class GameSessionQueueNameOrArnList(RootModel[List[GameSessionQueueNameOrArn]]):
    root: List[GameSessionQueueNameOrArn]


class GameSessionStatus(Enum):
    ACTIVE = 'ACTIVE'
    ACTIVATING = 'ACTIVATING'
    TERMINATED = 'TERMINATED'
    TERMINATING = 'TERMINATING'
    ERROR = 'ERROR'


class GameSessionStatusReason(Enum):
    INTERRUPTED = 'INTERRUPTED'


class GetComputeAccessInput(BaseModel):
    ComputeName: ComputeNameOrArn
    FleetId: FleetIdOrArn


class GetComputeAuthTokenInput(BaseModel):
    ComputeName: ComputeNameOrArn
    FleetId: FleetIdOrArn


class GetGameSessionLogUrlInput(BaseModel):
    GameSessionId: ArnStringModel


class IamRoleArn(
    RootModel[
        constr(pattern=r'^arn:.*:role\/[\w+=,.@-]+', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'^arn:.*:role\/[\w+=,.@-]+', min_length=1, max_length=256)


class IdStringModel(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=48)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=48)


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class InstanceId(RootModel[constr(pattern=r'[a-zA-Z0-9\.-]+')]):
    root: constr(pattern=r'[a-zA-Z0-9\.-]+')


class InstanceStatus(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    TERMINATING = 'TERMINATING'


class Integer(RootModel[int]):
    root: int


class InternalServiceException(RootModel[Any]):
    root: Any


class InvalidFleetStatusException(RootModel[Any]):
    root: Any


class InvalidGameSessionStatusException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class IpAddress(
    RootModel[constr(pattern=r'^[0-9A-Fa-f\:\.]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[0-9A-Fa-f\:\.]+', min_length=1, max_length=128)


class IpProtocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'


class LargeGameSessionData(RootModel[constr(min_length=1, max_length=262144)]):
    root: constr(min_length=1, max_length=262144)


class LaunchParametersStringModel(
    RootModel[
        constr(
            pattern=r'[A-Za-z0-9_:.+\/\\\- =@;{},?\'\[\]"]+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'[A-Za-z0-9_:.+\/\\\- =@;{},?\'\[\]"]+', min_length=1, max_length=1024
    )


class LaunchPathStringModel(
    RootModel[constr(pattern=r'[A-Za-z0-9_:.+\/\\\- ]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[A-Za-z0-9_:.+\/\\\- ]+', min_length=1, max_length=1024)


class LaunchTemplateId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class LaunchTemplateName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)


class LaunchTemplateVersion(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListLocationsLimit(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class LocationArnModel(
    RootModel[
        constr(pattern=r'^arn:.*:location\/custom-\S+', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^arn:.*:location\/custom-\S+', min_length=1, max_length=128)


class LocationFilter(Enum):
    AWS = 'AWS'
    CUSTOM = 'CUSTOM'


class LocationFilterList(RootModel[List[LocationFilter]]):
    root: List[LocationFilter] = Field(..., max_length=2, min_length=1)


class LocationStringModel(
    RootModel[constr(pattern=r'^[A-Za-z0-9\-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[A-Za-z0-9\-]+', min_length=1, max_length=64)


class LocationUpdateStatus(Enum):
    PENDING_UPDATE = 'PENDING_UPDATE'


class MatchmakerData(RootModel[constr(min_length=1, max_length=390000)]):
    root: constr(min_length=1, max_length=390000)


class MatchmakingAcceptanceTimeoutInteger(RootModel[conint(ge=1, le=600)]):
    root: conint(ge=1, le=600)


class MatchmakingConfigurationArn(
    RootModel[constr(pattern=r'^arn:.*:matchmakingconfiguration\/[a-zA-Z0-9-\.]*')]
):
    root: constr(pattern=r'^arn:.*:matchmakingconfiguration\/[a-zA-Z0-9-\.]*') = Field(
        ..., description='Data type used for Matchmaking Configuration ARN.'
    )


class MatchmakingConfigurationName(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9-\.]*|^arn:.*:matchmakingconfiguration\/[a-zA-Z0-9-\.]*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9-\.]*|^arn:.*:matchmakingconfiguration\/[a-zA-Z0-9-\.]*',
        min_length=1,
        max_length=256,
    )


class MatchmakingConfigurationNameList(RootModel[List[MatchmakingConfigurationName]]):
    root: List[MatchmakingConfigurationName]


class MatchmakingConfigurationStatus(Enum):
    CANCELLED = 'CANCELLED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PLACING = 'PLACING'
    QUEUED = 'QUEUED'
    REQUIRES_ACCEPTANCE = 'REQUIRES_ACCEPTANCE'
    SEARCHING = 'SEARCHING'
    TIMED_OUT = 'TIMED_OUT'


class MatchmakingIdStringModel(
    RootModel[constr(pattern=r'[a-zA-Z0-9-\.]*', max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9-\.]*', max_length=128)


class MatchmakingRequestTimeoutInteger(RootModel[conint(ge=1, le=43200)]):
    root: conint(ge=1, le=43200)


class MatchmakingRuleSetArn(
    RootModel[constr(pattern=r'^arn:.*:matchmakingruleset\/[a-zA-Z0-9-\.]*')]
):
    root: constr(pattern=r'^arn:.*:matchmakingruleset\/[a-zA-Z0-9-\.]*') = Field(
        ..., description='Data type used for Matchmaking RuleSet ARN.'
    )


class MatchmakingRuleSetName(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9-\.]*|^arn:.*:matchmakingruleset\/[a-zA-Z0-9-\.]*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9-\.]*|^arn:.*:matchmakingruleset\/[a-zA-Z0-9-\.]*',
        min_length=1,
        max_length=256,
    )


class MatchmakingRuleSetNameList(RootModel[List[MatchmakingRuleSetName]]):
    root: List[MatchmakingRuleSetName] = Field(..., max_length=10, min_length=1)


class MaxConcurrentGameSessionActivations(RootModel[conint(ge=1, le=2147483647)]):
    root: conint(ge=1, le=2147483647)


class MetricGroup(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class MetricGroupList(RootModel[List[MetricGroup]]):
    root: List[MetricGroup] = Field(..., max_length=1)


class MetricName(Enum):
    ActivatingGameSessions = 'ActivatingGameSessions'
    ActiveGameSessions = 'ActiveGameSessions'
    ActiveInstances = 'ActiveInstances'
    AvailableGameSessions = 'AvailableGameSessions'
    AvailablePlayerSessions = 'AvailablePlayerSessions'
    CurrentPlayerSessions = 'CurrentPlayerSessions'
    IdleInstances = 'IdleInstances'
    PercentAvailableGameSessions = 'PercentAvailableGameSessions'
    PercentIdleInstances = 'PercentIdleInstances'
    QueueDepth = 'QueueDepth'
    WaitTime = 'WaitTime'
    ConcurrentActivatableGameSessions = 'ConcurrentActivatableGameSessions'


class NonBlankAndLengthConstraintString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class NonBlankString(RootModel[constr(pattern=r'[^\s]+')]):
    root: constr(pattern=r'[^\s]+')


class NonEmptyString(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class NonNegativeDouble(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class NonNegativeLimitedLengthDouble(
    RootModel[constr(pattern=r'^\d{1,5}(?:\.\d{1,5})?$', min_length=1, max_length=11)]
):
    root: constr(pattern=r'^\d{1,5}(?:\.\d{1,5})?$', min_length=1, max_length=11)


class NonZeroAndMaxString(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class NotFoundException(RootModel[Any]):
    root: Any


class OperatingSystem(Enum):
    WINDOWS_2012 = 'WINDOWS_2012'
    AMAZON_LINUX = 'AMAZON_LINUX'
    AMAZON_LINUX_2 = 'AMAZON_LINUX_2'
    WINDOWS_2016 = 'WINDOWS_2016'


class OutOfCapacityException(RootModel[Any]):
    root: Any


class PlayerAttributeString(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PlayerAttributeStringDoubleMap(RootModel[Optional[Dict[str, DoubleObject]]]):
    root: Optional[Dict[str, DoubleObject]] = None


class PlayerAttributeStringList(RootModel[List[PlayerAttributeString]]):
    root: List[PlayerAttributeString]


class PlayerData(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class PlayerDataMap(RootModel[Optional[Dict[str, PlayerData]]]):
    root: Optional[Dict[str, PlayerData]] = None


class PlayerIdList(RootModel[List[NonZeroAndMaxString]]):
    root: List[NonZeroAndMaxString] = Field(..., max_length=25, min_length=1)


class PlayerLatency(BaseModel):
    LatencyInMilliseconds: Optional[Float] = None
    PlayerId: Optional[NonZeroAndMaxString] = None
    RegionIdentifier: Optional[NonZeroAndMaxString] = None


class PlayerLatencyList(RootModel[List[PlayerLatency]]):
    root: List[PlayerLatency]


class PlayerSessionCreationPolicy(Enum):
    ACCEPT_ALL = 'ACCEPT_ALL'
    DENY_ALL = 'DENY_ALL'


class PlayerSessionId(RootModel[constr(pattern=r'^psess-\S+')]):
    root: constr(pattern=r'^psess-\S+')


class PlayerSessionStatus(Enum):
    RESERVED = 'RESERVED'
    ACTIVE = 'ACTIVE'
    COMPLETED = 'COMPLETED'
    TIMEDOUT = 'TIMEDOUT'


class PolicyType(Enum):
    RuleBased = 'RuleBased'
    TargetBased = 'TargetBased'


class PortNumber(RootModel[conint(ge=1, le=60000)]):
    root: conint(ge=1, le=60000)


class PositiveInteger(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PositiveLong(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PriorityType(Enum):
    LATENCY = 'LATENCY'
    COST = 'COST'
    DESTINATION = 'DESTINATION'
    LOCATION = 'LOCATION'


class PriorityTypeList(RootModel[List[PriorityType]]):
    root: List[PriorityType] = Field(..., max_length=4, min_length=1)


class ProtectionPolicy(Enum):
    NoProtection = 'NoProtection'
    FullProtection = 'FullProtection'


class PutScalingPolicyOutput(BaseModel):
    Name: Optional[NonZeroAndMaxString] = None


class QueueArnsList(RootModel[List[ArnStringModel]]):
    root: List[ArnStringModel]


class QueueCustomEventData(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=256)


class QueueSnsArnStringModel(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]*(\.fifo)?', min_length=0, max_length=300)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]*(\.fifo)?', min_length=0, max_length=300)


class RegisterComputeInput(BaseModel):
    CertificatePath: Optional[NonZeroAndMaxString] = None
    ComputeName_1: ComputeName = Field(..., alias='ComputeName')
    DnsName: Optional[DnsNameInput] = None
    FleetId: FleetIdOrArn
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    Location: Optional[LocationStringModel] = None


class RegisterGameServerInput(BaseModel):
    ConnectionInfo: Optional[GameServerConnectionInfo] = None
    GameServerData_1: Optional[GameServerData] = Field(None, alias='GameServerData')
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerId_1: GameServerId = Field(..., alias='GameServerId')
    InstanceId: GameServerInstanceId


class RequestUploadCredentialsInput(BaseModel):
    BuildId: BuildIdOrArn


class ResolveAliasInput(BaseModel):
    AliasId: AliasIdOrArn


class ResolveAliasOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class ResumeGameServerGroupInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    ResumeActions: GameServerGroupActions


class RoutingStrategyType(Enum):
    SIMPLE = 'SIMPLE'
    TERMINAL = 'TERMINAL'


class RuleSetBody(RootModel[constr(min_length=1, max_length=65535)]):
    root: constr(min_length=1, max_length=65535)


class RuleSetLimit(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class S3Location(BaseModel):
    Bucket: Optional[NonEmptyString] = None
    Key: Optional[NonEmptyString] = None
    ObjectVersion: Optional[NonEmptyString] = None
    RoleArn: Optional[NonEmptyString] = None


class ScalingAdjustmentType(Enum):
    ChangeInCapacity = 'ChangeInCapacity'
    ExactCapacity = 'ExactCapacity'
    PercentChangeInCapacity = 'PercentChangeInCapacity'


class ScalingStatusType(Enum):
    ACTIVE = 'ACTIVE'
    UPDATE_REQUESTED = 'UPDATE_REQUESTED'
    UPDATING = 'UPDATING'
    DELETE_REQUESTED = 'DELETE_REQUESTED'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    ERROR = 'ERROR'


class ScriptArn(RootModel[constr(pattern=r'^arn:.*:script\/script-\S+')]):
    root: constr(pattern=r'^arn:.*:script\/script-\S+')


class ScriptId(RootModel[constr(pattern=r'^script-\S+')]):
    root: constr(pattern=r'^script-\S+')


class ScriptIdOrArn(
    RootModel[constr(pattern=r'^script-\S+|^arn:.*:script\/script-\S+')]
):
    root: constr(pattern=r'^script-\S+|^arn:.*:script\/script-\S+')


class SearchGameSessionsInput(BaseModel):
    AliasId: Optional[AliasIdOrArn] = None
    FilterExpression: Optional[NonZeroAndMaxString] = None
    FleetId: Optional[FleetIdOrArn] = None
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    SortExpression: Optional[NonZeroAndMaxString] = None


class ServerProcess(BaseModel):
    ConcurrentExecutions: PositiveInteger
    LaunchPath: LaunchPathStringModel
    Parameters: Optional[LaunchParametersStringModel] = None


class ServerProcessList(RootModel[List[ServerProcess]]):
    root: List[ServerProcess] = Field(..., max_length=50, min_length=1)


class ServerSdkVersion(RootModel[constr(pattern=r'^\d+\.\d+\.\d+$', max_length=128)]):
    root: constr(pattern=r'^\d+\.\d+\.\d+$', max_length=128) = Field(
        ..., description='Data type used for server SDK version.'
    )


class SnsArnStringModel(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_/-]*(.fifo)?', min_length=0, max_length=300)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_/-]*(.fifo)?', min_length=0, max_length=300)


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class StartFleetActionsInput(BaseModel):
    Actions: FleetActionList
    FleetId: FleetIdOrArn
    Location: Optional[LocationStringModel] = None


class StartFleetActionsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class StopFleetActionsInput(BaseModel):
    Actions: FleetActionList
    FleetId: FleetIdOrArn
    Location: Optional[LocationStringModel] = None


class StopFleetActionsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class StopGameSessionPlacementInput(BaseModel):
    PlacementId: IdStringModel


class StopMatchmakingInput(BaseModel):
    TicketId: MatchmakingIdStringModel


class StopMatchmakingOutput(BaseModel):
    pass


class StringList(RootModel[List[NonZeroAndMaxString]]):
    root: List[NonZeroAndMaxString]


class StringModel(RootModel[str]):
    root: str


class SuspendGameServerGroupInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    SuspendActions: GameServerGroupActions


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TaggingFailedException(RootModel[Any]):
    root: Any


class TargetConfiguration(BaseModel):
    TargetValue: Double


class TargetTrackingConfiguration(BaseModel):
    TargetValue: NonNegativeDouble


class TerminalRoutingStrategyException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class UnauthorizedException(RootModel[Any]):
    root: Any


class UnsupportedRegionException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateBuildInput(BaseModel):
    BuildId: BuildIdOrArn
    Name: Optional[NonZeroAndMaxString] = None
    Version: Optional[NonZeroAndMaxString] = None


class UpdateFleetAttributesOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class UpdateFleetCapacityOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    Location: Optional[LocationStringModel] = None


class UpdateFleetPortSettingsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class UpdateGameServerInput(BaseModel):
    GameServerData_1: Optional[GameServerData] = Field(None, alias='GameServerData')
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerId_1: GameServerId = Field(..., alias='GameServerId')
    HealthCheck: Optional[GameServerHealthCheck] = None
    UtilizationStatus: Optional[GameServerUtilizationStatus] = None


class ValidateMatchmakingRuleSetInput(BaseModel):
    RuleSetBody_1: RuleSetBody = Field(..., alias='RuleSetBody')


class ValidateMatchmakingRuleSetOutput(BaseModel):
    Valid: Optional[BooleanModel] = None


class VpcPeeringAuthorization(BaseModel):
    CreationTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    GameLiftAwsAccountId: Optional[NonZeroAndMaxString] = None
    PeerVpcAwsAccountId: Optional[NonZeroAndMaxString] = None
    PeerVpcId: Optional[NonZeroAndMaxString] = None


class VpcPeeringAuthorizationList(RootModel[List[VpcPeeringAuthorization]]):
    root: List[VpcPeeringAuthorization]


class VpcPeeringConnectionStatus(BaseModel):
    Code: Optional[NonZeroAndMaxString] = None
    Message: Optional[NonZeroAndMaxString] = None


class VpcSubnet(
    RootModel[constr(pattern=r'^subnet-[0-9a-z]+$', min_length=15, max_length=24)]
):
    root: constr(pattern=r'^subnet-[0-9a-z]+$', min_length=15, max_length=24)


class VpcSubnets(RootModel[List[VpcSubnet]]):
    root: List[VpcSubnet] = Field(..., max_length=20, min_length=1)


class WeightedCapacity(
    RootModel[
        constr(
            pattern=r'^[\u0031-\u0039][\u0030-\u0039]{0,2}$', min_length=1, max_length=3
        )
    ]
):
    root: constr(
        pattern=r'^[\u0031-\u0039][\u0030-\u0039]{0,2}$', min_length=1, max_length=3
    )


class WholeNumber(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ZipBlob(RootModel[constr(max_length=5000000)]):
    root: constr(max_length=5000000)


class XAmzTarget(Enum):
    GameLift_AcceptMatch = 'GameLift.AcceptMatch'


class XAmzTarget1(Enum):
    GameLift_ClaimGameServer = 'GameLift.ClaimGameServer'


class XAmzTarget2(Enum):
    GameLift_CreateAlias = 'GameLift.CreateAlias'


class XAmzTarget3(Enum):
    GameLift_CreateBuild = 'GameLift.CreateBuild'


class XAmzTarget4(Enum):
    GameLift_CreateFleet = 'GameLift.CreateFleet'


class XAmzTarget5(Enum):
    GameLift_CreateFleetLocations = 'GameLift.CreateFleetLocations'


class XAmzTarget6(Enum):
    GameLift_CreateGameServerGroup = 'GameLift.CreateGameServerGroup'


class XAmzTarget7(Enum):
    GameLift_CreateGameSession = 'GameLift.CreateGameSession'


class XAmzTarget8(Enum):
    GameLift_CreateGameSessionQueue = 'GameLift.CreateGameSessionQueue'


class XAmzTarget9(Enum):
    GameLift_CreateLocation = 'GameLift.CreateLocation'


class XAmzTarget10(Enum):
    GameLift_CreateMatchmakingConfiguration = 'GameLift.CreateMatchmakingConfiguration'


class XAmzTarget11(Enum):
    GameLift_CreateMatchmakingRuleSet = 'GameLift.CreateMatchmakingRuleSet'


class XAmzTarget12(Enum):
    GameLift_CreatePlayerSession = 'GameLift.CreatePlayerSession'


class XAmzTarget13(Enum):
    GameLift_CreatePlayerSessions = 'GameLift.CreatePlayerSessions'


class XAmzTarget14(Enum):
    GameLift_CreateScript = 'GameLift.CreateScript'


class XAmzTarget15(Enum):
    GameLift_CreateVpcPeeringAuthorization = 'GameLift.CreateVpcPeeringAuthorization'


class XAmzTarget16(Enum):
    GameLift_CreateVpcPeeringConnection = 'GameLift.CreateVpcPeeringConnection'


class XAmzTarget17(Enum):
    GameLift_DeleteAlias = 'GameLift.DeleteAlias'


class XAmzTarget18(Enum):
    GameLift_DeleteBuild = 'GameLift.DeleteBuild'


class XAmzTarget19(Enum):
    GameLift_DeleteFleet = 'GameLift.DeleteFleet'


class XAmzTarget20(Enum):
    GameLift_DeleteFleetLocations = 'GameLift.DeleteFleetLocations'


class XAmzTarget21(Enum):
    GameLift_DeleteGameServerGroup = 'GameLift.DeleteGameServerGroup'


class XAmzTarget22(Enum):
    GameLift_DeleteGameSessionQueue = 'GameLift.DeleteGameSessionQueue'


class XAmzTarget23(Enum):
    GameLift_DeleteLocation = 'GameLift.DeleteLocation'


class XAmzTarget24(Enum):
    GameLift_DeleteMatchmakingConfiguration = 'GameLift.DeleteMatchmakingConfiguration'


class XAmzTarget25(Enum):
    GameLift_DeleteMatchmakingRuleSet = 'GameLift.DeleteMatchmakingRuleSet'


class XAmzTarget26(Enum):
    GameLift_DeleteScalingPolicy = 'GameLift.DeleteScalingPolicy'


class XAmzTarget27(Enum):
    GameLift_DeleteScript = 'GameLift.DeleteScript'


class XAmzTarget28(Enum):
    GameLift_DeleteVpcPeeringAuthorization = 'GameLift.DeleteVpcPeeringAuthorization'


class XAmzTarget29(Enum):
    GameLift_DeleteVpcPeeringConnection = 'GameLift.DeleteVpcPeeringConnection'


class XAmzTarget30(Enum):
    GameLift_DeregisterCompute = 'GameLift.DeregisterCompute'


class XAmzTarget31(Enum):
    GameLift_DeregisterGameServer = 'GameLift.DeregisterGameServer'


class XAmzTarget32(Enum):
    GameLift_DescribeAlias = 'GameLift.DescribeAlias'


class XAmzTarget33(Enum):
    GameLift_DescribeBuild = 'GameLift.DescribeBuild'


class XAmzTarget34(Enum):
    GameLift_DescribeCompute = 'GameLift.DescribeCompute'


class XAmzTarget35(Enum):
    GameLift_DescribeEC2InstanceLimits = 'GameLift.DescribeEC2InstanceLimits'


class XAmzTarget36(Enum):
    GameLift_DescribeFleetAttributes = 'GameLift.DescribeFleetAttributes'


class XAmzTarget37(Enum):
    GameLift_DescribeFleetCapacity = 'GameLift.DescribeFleetCapacity'


class XAmzTarget38(Enum):
    GameLift_DescribeFleetEvents = 'GameLift.DescribeFleetEvents'


class XAmzTarget39(Enum):
    GameLift_DescribeFleetLocationAttributes = (
        'GameLift.DescribeFleetLocationAttributes'
    )


class XAmzTarget40(Enum):
    GameLift_DescribeFleetLocationCapacity = 'GameLift.DescribeFleetLocationCapacity'


class XAmzTarget41(Enum):
    GameLift_DescribeFleetLocationUtilization = (
        'GameLift.DescribeFleetLocationUtilization'
    )


class XAmzTarget42(Enum):
    GameLift_DescribeFleetPortSettings = 'GameLift.DescribeFleetPortSettings'


class XAmzTarget43(Enum):
    GameLift_DescribeFleetUtilization = 'GameLift.DescribeFleetUtilization'


class XAmzTarget44(Enum):
    GameLift_DescribeGameServer = 'GameLift.DescribeGameServer'


class XAmzTarget45(Enum):
    GameLift_DescribeGameServerGroup = 'GameLift.DescribeGameServerGroup'


class XAmzTarget46(Enum):
    GameLift_DescribeGameServerInstances = 'GameLift.DescribeGameServerInstances'


class XAmzTarget47(Enum):
    GameLift_DescribeGameSessionDetails = 'GameLift.DescribeGameSessionDetails'


class XAmzTarget48(Enum):
    GameLift_DescribeGameSessionPlacement = 'GameLift.DescribeGameSessionPlacement'


class XAmzTarget49(Enum):
    GameLift_DescribeGameSessionQueues = 'GameLift.DescribeGameSessionQueues'


class XAmzTarget50(Enum):
    GameLift_DescribeGameSessions = 'GameLift.DescribeGameSessions'


class XAmzTarget51(Enum):
    GameLift_DescribeInstances = 'GameLift.DescribeInstances'


class XAmzTarget52(Enum):
    GameLift_DescribeMatchmaking = 'GameLift.DescribeMatchmaking'


class XAmzTarget53(Enum):
    GameLift_DescribeMatchmakingConfigurations = (
        'GameLift.DescribeMatchmakingConfigurations'
    )


class XAmzTarget54(Enum):
    GameLift_DescribeMatchmakingRuleSets = 'GameLift.DescribeMatchmakingRuleSets'


class XAmzTarget55(Enum):
    GameLift_DescribePlayerSessions = 'GameLift.DescribePlayerSessions'


class XAmzTarget56(Enum):
    GameLift_DescribeRuntimeConfiguration = 'GameLift.DescribeRuntimeConfiguration'


class XAmzTarget57(Enum):
    GameLift_DescribeScalingPolicies = 'GameLift.DescribeScalingPolicies'


class XAmzTarget58(Enum):
    GameLift_DescribeScript = 'GameLift.DescribeScript'


class XAmzTarget59(Enum):
    GameLift_DescribeVpcPeeringAuthorizations = (
        'GameLift.DescribeVpcPeeringAuthorizations'
    )


class XAmzTarget60(Enum):
    GameLift_DescribeVpcPeeringConnections = 'GameLift.DescribeVpcPeeringConnections'


class XAmzTarget61(Enum):
    GameLift_GetComputeAccess = 'GameLift.GetComputeAccess'


class XAmzTarget62(Enum):
    GameLift_GetComputeAuthToken = 'GameLift.GetComputeAuthToken'


class XAmzTarget63(Enum):
    GameLift_GetGameSessionLogUrl = 'GameLift.GetGameSessionLogUrl'


class XAmzTarget64(Enum):
    GameLift_GetInstanceAccess = 'GameLift.GetInstanceAccess'


class XAmzTarget65(Enum):
    GameLift_ListAliases = 'GameLift.ListAliases'


class XAmzTarget66(Enum):
    GameLift_ListBuilds = 'GameLift.ListBuilds'


class XAmzTarget67(Enum):
    GameLift_ListCompute = 'GameLift.ListCompute'


class XAmzTarget68(Enum):
    GameLift_ListFleets = 'GameLift.ListFleets'


class XAmzTarget69(Enum):
    GameLift_ListGameServerGroups = 'GameLift.ListGameServerGroups'


class XAmzTarget70(Enum):
    GameLift_ListGameServers = 'GameLift.ListGameServers'


class XAmzTarget71(Enum):
    GameLift_ListLocations = 'GameLift.ListLocations'


class XAmzTarget72(Enum):
    GameLift_ListScripts = 'GameLift.ListScripts'


class XAmzTarget73(Enum):
    GameLift_ListTagsForResource = 'GameLift.ListTagsForResource'


class XAmzTarget74(Enum):
    GameLift_PutScalingPolicy = 'GameLift.PutScalingPolicy'


class XAmzTarget75(Enum):
    GameLift_RegisterCompute = 'GameLift.RegisterCompute'


class XAmzTarget76(Enum):
    GameLift_RegisterGameServer = 'GameLift.RegisterGameServer'


class XAmzTarget77(Enum):
    GameLift_RequestUploadCredentials = 'GameLift.RequestUploadCredentials'


class XAmzTarget78(Enum):
    GameLift_ResolveAlias = 'GameLift.ResolveAlias'


class XAmzTarget79(Enum):
    GameLift_ResumeGameServerGroup = 'GameLift.ResumeGameServerGroup'


class XAmzTarget80(Enum):
    GameLift_SearchGameSessions = 'GameLift.SearchGameSessions'


class XAmzTarget81(Enum):
    GameLift_StartFleetActions = 'GameLift.StartFleetActions'


class XAmzTarget82(Enum):
    GameLift_StartGameSessionPlacement = 'GameLift.StartGameSessionPlacement'


class XAmzTarget83(Enum):
    GameLift_StartMatchBackfill = 'GameLift.StartMatchBackfill'


class XAmzTarget84(Enum):
    GameLift_StartMatchmaking = 'GameLift.StartMatchmaking'


class XAmzTarget85(Enum):
    GameLift_StopFleetActions = 'GameLift.StopFleetActions'


class XAmzTarget86(Enum):
    GameLift_StopGameSessionPlacement = 'GameLift.StopGameSessionPlacement'


class XAmzTarget87(Enum):
    GameLift_StopMatchmaking = 'GameLift.StopMatchmaking'


class XAmzTarget88(Enum):
    GameLift_SuspendGameServerGroup = 'GameLift.SuspendGameServerGroup'


class XAmzTarget89(Enum):
    GameLift_TagResource = 'GameLift.TagResource'


class XAmzTarget90(Enum):
    GameLift_UntagResource = 'GameLift.UntagResource'


class XAmzTarget91(Enum):
    GameLift_UpdateAlias = 'GameLift.UpdateAlias'


class XAmzTarget92(Enum):
    GameLift_UpdateBuild = 'GameLift.UpdateBuild'


class XAmzTarget93(Enum):
    GameLift_UpdateFleetAttributes = 'GameLift.UpdateFleetAttributes'


class XAmzTarget94(Enum):
    GameLift_UpdateFleetCapacity = 'GameLift.UpdateFleetCapacity'


class XAmzTarget95(Enum):
    GameLift_UpdateFleetPortSettings = 'GameLift.UpdateFleetPortSettings'


class XAmzTarget96(Enum):
    GameLift_UpdateGameServer = 'GameLift.UpdateGameServer'


class XAmzTarget97(Enum):
    GameLift_UpdateGameServerGroup = 'GameLift.UpdateGameServerGroup'


class XAmzTarget98(Enum):
    GameLift_UpdateGameSession = 'GameLift.UpdateGameSession'


class XAmzTarget99(Enum):
    GameLift_UpdateGameSessionQueue = 'GameLift.UpdateGameSessionQueue'


class XAmzTarget100(Enum):
    GameLift_UpdateMatchmakingConfiguration = 'GameLift.UpdateMatchmakingConfiguration'


class XAmzTarget101(Enum):
    GameLift_UpdateRuntimeConfiguration = 'GameLift.UpdateRuntimeConfiguration'


class XAmzTarget102(Enum):
    GameLift_UpdateScript = 'GameLift.UpdateScript'


class XAmzTarget103(Enum):
    GameLift_ValidateMatchmakingRuleSet = 'GameLift.ValidateMatchmakingRuleSet'


class AcceptMatchInput(BaseModel):
    AcceptanceType_1: AcceptanceType = Field(..., alias='AcceptanceType')
    PlayerIds: StringList
    TicketId: MatchmakingIdStringModel


class AnywhereConfiguration(BaseModel):
    Cost: NonNegativeLimitedLengthDouble


class AttributeValue(BaseModel):
    N: Optional[DoubleObject] = None
    S: Optional[PlayerAttributeString] = None
    SDM: Optional[PlayerAttributeStringDoubleMap] = None
    SL: Optional[PlayerAttributeStringList] = None


class AwsCredentials(BaseModel):
    AccessKeyId: Optional[NonEmptyString] = None
    SecretAccessKey: Optional[NonEmptyString] = None
    SessionToken: Optional[NonEmptyString] = None


class Build(BaseModel):
    BuildArn_1: Optional[BuildArn] = Field(None, alias='BuildArn')
    BuildId_1: Optional[BuildId] = Field(None, alias='BuildId')
    CreationTime: Optional[Timestamp] = None
    Name: Optional[FreeText] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    ServerSdkVersion_1: Optional[ServerSdkVersion] = Field(
        None, alias='ServerSdkVersion'
    )
    SizeOnDisk: Optional[PositiveLong] = None
    Status: Optional[BuildStatus] = None
    Version: Optional[FreeText] = None


class BuildList(RootModel[List[Build]]):
    root: List[Build]


class CertificateConfiguration(BaseModel):
    CertificateType_1: CertificateType = Field(..., alias='CertificateType')


class ClaimGameServerInput(BaseModel):
    GameServerData_1: Optional[GameServerData] = Field(None, alias='GameServerData')
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerId_1: Optional[GameServerId] = Field(None, alias='GameServerId')


class Compute(BaseModel):
    ComputeArn_1: Optional[ComputeArn] = Field(None, alias='ComputeArn')
    ComputeName_1: Optional[ComputeName] = Field(None, alias='ComputeName')
    ComputeStatus_1: Optional[ComputeStatus] = Field(None, alias='ComputeStatus')
    CreationTime: Optional[Timestamp] = None
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    GameLiftServiceSdkEndpoint: Optional[GameLiftServiceSdkEndpointOutput] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    Location: Optional[LocationStringModel] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    Type: Optional[EC2InstanceType] = None


class ComputeList(RootModel[List[Compute]]):
    root: List[Compute]


class CreateBuildOutput(BaseModel):
    Build_1: Optional[Build] = Field(None, alias='Build')
    StorageLocation: Optional[S3Location] = None
    UploadCredentials: Optional[AwsCredentials] = None


class CreatePlayerSessionInput(BaseModel):
    GameSessionId: ArnStringModel
    PlayerData_1: Optional[PlayerData] = Field(None, alias='PlayerData')
    PlayerId: NonZeroAndMaxString


class CreatePlayerSessionsInput(BaseModel):
    GameSessionId: ArnStringModel
    PlayerDataMap_1: Optional[PlayerDataMap] = Field(None, alias='PlayerDataMap')
    PlayerIds: PlayerIdList


class CreateVpcPeeringAuthorizationInput(BaseModel):
    GameLiftAwsAccountId: NonZeroAndMaxString
    PeerVpcId: NonZeroAndMaxString


class CreateVpcPeeringAuthorizationOutput(BaseModel):
    VpcPeeringAuthorization_1: Optional[VpcPeeringAuthorization] = Field(
        None, alias='VpcPeeringAuthorization'
    )


class CreateVpcPeeringConnectionInput(BaseModel):
    FleetId_1: FleetId = Field(..., alias='FleetId')
    PeerVpcAwsAccountId: NonZeroAndMaxString
    PeerVpcId: NonZeroAndMaxString


class DeleteFleetInput(BaseModel):
    FleetId: FleetIdOrArn


class DeleteGameServerGroupInput(BaseModel):
    DeleteOption: Optional[GameServerGroupDeleteOption] = None
    GameServerGroupName: GameServerGroupNameOrArn


class DeleteGameSessionQueueInput(BaseModel):
    Name: GameSessionQueueNameOrArn


class DeleteMatchmakingConfigurationInput(BaseModel):
    Name: MatchmakingConfigurationName


class DeleteMatchmakingRuleSetInput(BaseModel):
    Name: MatchmakingRuleSetName


class DeleteScalingPolicyInput(BaseModel):
    FleetId: FleetIdOrArn
    Name: NonZeroAndMaxString


class DeleteScriptInput(BaseModel):
    ScriptId: ScriptIdOrArn


class DeleteVpcPeeringAuthorizationInput(BaseModel):
    GameLiftAwsAccountId: NonZeroAndMaxString
    PeerVpcId: NonZeroAndMaxString


class DeleteVpcPeeringConnectionInput(BaseModel):
    FleetId_1: FleetId = Field(..., alias='FleetId')
    VpcPeeringConnectionId: NonZeroAndMaxString


class DeregisterComputeInput(BaseModel):
    ComputeName: ComputeNameOrArn
    FleetId: FleetIdOrArn


class DeregisterGameServerInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerId_1: GameServerId = Field(..., alias='GameServerId')


class DescribeBuildOutput(BaseModel):
    Build_1: Optional[Build] = Field(None, alias='Build')


class DescribeComputeInput(BaseModel):
    ComputeName: ComputeNameOrArn
    FleetId: FleetIdOrArn


class DescribeComputeOutput(BaseModel):
    Compute_1: Optional[Compute] = Field(None, alias='Compute')


class DescribeEC2InstanceLimitsInput(BaseModel):
    EC2InstanceType_1: Optional[EC2InstanceType] = Field(None, alias='EC2InstanceType')
    Location: Optional[LocationStringModel] = None


class DescribeFleetAttributesInput(BaseModel):
    FleetIds: Optional[FleetIdOrArnList] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetCapacityInput(BaseModel):
    FleetIds: Optional[FleetIdOrArnList] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetEventsInput(BaseModel):
    EndTime: Optional[Timestamp] = None
    FleetId: FleetIdOrArn
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    StartTime: Optional[Timestamp] = None


class DescribeFleetLocationCapacityInput(BaseModel):
    FleetId: FleetIdOrArn
    Location: LocationStringModel


class DescribeFleetLocationUtilizationInput(BaseModel):
    FleetId: FleetIdOrArn
    Location: LocationStringModel


class DescribeFleetPortSettingsInput(BaseModel):
    FleetId: FleetIdOrArn
    Location: Optional[LocationStringModel] = None


class DescribeFleetUtilizationInput(BaseModel):
    FleetIds: Optional[FleetIdOrArnList] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameServerGroupInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn


class DescribeGameServerInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerId_1: GameServerId = Field(..., alias='GameServerId')


class DescribeGameServerInstancesInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    InstanceIds: Optional[GameServerInstanceIds] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameSessionDetailsInput(BaseModel):
    AliasId: Optional[AliasIdOrArn] = None
    FleetId: Optional[FleetIdOrArn] = None
    GameSessionId: Optional[ArnStringModel] = None
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    StatusFilter: Optional[NonZeroAndMaxString] = None


class DescribeGameSessionPlacementInput(BaseModel):
    PlacementId: IdStringModel


class DescribeGameSessionQueuesInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    Names: Optional[GameSessionQueueNameOrArnList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameSessionsInput(BaseModel):
    AliasId: Optional[AliasIdOrArn] = None
    FleetId: Optional[FleetIdOrArn] = None
    GameSessionId: Optional[ArnStringModel] = None
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    StatusFilter: Optional[NonZeroAndMaxString] = None


class DescribeInstancesInput(BaseModel):
    FleetId: FleetIdOrArn
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeMatchmakingConfigurationsInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    Names: Optional[MatchmakingConfigurationNameList] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    RuleSetName: Optional[MatchmakingRuleSetName] = None


class DescribeMatchmakingRuleSetsInput(BaseModel):
    Limit: Optional[RuleSetLimit] = None
    Names: Optional[MatchmakingRuleSetNameList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribePlayerSessionsInput(BaseModel):
    GameSessionId: Optional[ArnStringModel] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    PlayerId: Optional[NonZeroAndMaxString] = None
    PlayerSessionId_1: Optional[PlayerSessionId] = Field(None, alias='PlayerSessionId')
    PlayerSessionStatusFilter: Optional[NonZeroAndMaxString] = None


class DescribeRuntimeConfigurationInput(BaseModel):
    FleetId: FleetIdOrArn


class DescribeScalingPoliciesInput(BaseModel):
    FleetId: FleetIdOrArn
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    StatusFilter: Optional[ScalingStatusType] = None


class DescribeScriptInput(BaseModel):
    ScriptId: ScriptIdOrArn


class DescribeVpcPeeringAuthorizationsOutput(BaseModel):
    VpcPeeringAuthorizations: Optional[VpcPeeringAuthorizationList] = None


class DescribeVpcPeeringConnectionsInput(BaseModel):
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class DesiredPlayerSession(BaseModel):
    PlayerData_1: Optional[PlayerData] = Field(None, alias='PlayerData')
    PlayerId: Optional[NonZeroAndMaxString] = None


class DesiredPlayerSessionList(RootModel[List[DesiredPlayerSession]]):
    root: List[DesiredPlayerSession]


class EC2InstanceCounts(BaseModel):
    ACTIVE: Optional[WholeNumber] = None
    DESIRED: Optional[WholeNumber] = None
    IDLE: Optional[WholeNumber] = None
    MAXIMUM: Optional[WholeNumber] = None
    MINIMUM: Optional[WholeNumber] = None
    PENDING: Optional[WholeNumber] = None
    TERMINATING: Optional[WholeNumber] = None


class EC2InstanceLimit(BaseModel):
    CurrentInstances: Optional[WholeNumber] = None
    EC2InstanceType_1: Optional[EC2InstanceType] = Field(None, alias='EC2InstanceType')
    InstanceLimit: Optional[WholeNumber] = None
    Location: Optional[LocationStringModel] = None


class EC2InstanceLimitList(RootModel[List[EC2InstanceLimit]]):
    root: List[EC2InstanceLimit]


class Event(BaseModel):
    EventCode_1: Optional[EventCode] = Field(None, alias='EventCode')
    EventId: Optional[NonZeroAndMaxString] = None
    EventTime: Optional[Timestamp] = None
    Message: Optional[NonEmptyString] = None
    PreSignedLogUrl: Optional[NonZeroAndMaxString] = None
    ResourceId: Optional[NonZeroAndMaxString] = None


class EventList(RootModel[List[Event]]):
    root: List[Event]


class FleetCapacity(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    InstanceCounts: Optional[EC2InstanceCounts] = None
    InstanceType: Optional[EC2InstanceType] = None
    Location: Optional[LocationStringModel] = None


class FleetCapacityList(RootModel[List[FleetCapacity]]):
    root: List[FleetCapacity]


class FleetUtilization(BaseModel):
    ActiveGameSessionCount: Optional[WholeNumber] = None
    ActiveServerProcessCount: Optional[WholeNumber] = None
    CurrentPlayerSessionCount: Optional[WholeNumber] = None
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    Location: Optional[LocationStringModel] = None
    MaximumPlayerSessionCount: Optional[WholeNumber] = None


class FleetUtilizationList(RootModel[List[FleetUtilization]]):
    root: List[FleetUtilization]


class GameProperty(BaseModel):
    Key: GamePropertyKey
    Value: GamePropertyValue


class GamePropertyList(RootModel[List[GameProperty]]):
    root: List[GameProperty] = Field(..., max_length=16)


class GameServer(BaseModel):
    ClaimStatus: Optional[GameServerClaimStatus] = None
    ConnectionInfo: Optional[GameServerConnectionInfo] = None
    GameServerData_1: Optional[GameServerData] = Field(None, alias='GameServerData')
    GameServerGroupArn_1: Optional[GameServerGroupArn] = Field(
        None, alias='GameServerGroupArn'
    )
    GameServerGroupName_1: Optional[GameServerGroupName] = Field(
        None, alias='GameServerGroupName'
    )
    GameServerId_1: Optional[GameServerId] = Field(None, alias='GameServerId')
    InstanceId: Optional[GameServerInstanceId] = None
    LastClaimTime: Optional[Timestamp] = None
    LastHealthCheckTime: Optional[Timestamp] = None
    RegistrationTime: Optional[Timestamp] = None
    UtilizationStatus: Optional[GameServerUtilizationStatus] = None


class GameServerGroupAutoScalingPolicy(BaseModel):
    EstimatedInstanceWarmup: Optional[PositiveInteger] = None
    TargetTrackingConfiguration_1: TargetTrackingConfiguration = Field(
        ..., alias='TargetTrackingConfiguration'
    )


class GameServerInstance(BaseModel):
    GameServerGroupArn_1: Optional[GameServerGroupArn] = Field(
        None, alias='GameServerGroupArn'
    )
    GameServerGroupName_1: Optional[GameServerGroupName] = Field(
        None, alias='GameServerGroupName'
    )
    InstanceId: Optional[GameServerInstanceId] = None
    InstanceStatus: Optional[GameServerInstanceStatus] = None


class GameServerInstances(RootModel[List[GameServerInstance]]):
    root: List[GameServerInstance]


class GameServers(RootModel[List[GameServer]]):
    root: List[GameServer]


class GameSession(BaseModel):
    CreationTime: Optional[Timestamp] = None
    CreatorId: Optional[NonZeroAndMaxString] = None
    CurrentPlayerSessionCount: Optional[WholeNumber] = None
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData: Optional[LargeGameSessionData] = None
    GameSessionId: Optional[NonZeroAndMaxString] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    Location: Optional[LocationStringModel] = None
    MatchmakerData_1: Optional[MatchmakerData] = Field(None, alias='MatchmakerData')
    MaximumPlayerSessionCount: Optional[WholeNumber] = None
    Name: Optional[NonZeroAndMaxString] = None
    PlayerSessionCreationPolicy_1: Optional[PlayerSessionCreationPolicy] = Field(
        None, alias='PlayerSessionCreationPolicy'
    )
    Port: Optional[PortNumber] = None
    Status: Optional[GameSessionStatus] = None
    StatusReason: Optional[GameSessionStatusReason] = None
    TerminationTime: Optional[Timestamp] = None


class GameSessionDetail(BaseModel):
    GameSession_1: Optional[GameSession] = Field(None, alias='GameSession')
    ProtectionPolicy_1: Optional[ProtectionPolicy] = Field(
        None, alias='ProtectionPolicy'
    )


class GameSessionDetailList(RootModel[List[GameSessionDetail]]):
    root: List[GameSessionDetail]


class GameSessionList(RootModel[List[GameSession]]):
    root: List[GameSession]


class GetComputeAccessOutput(BaseModel):
    ComputeArn_1: Optional[ComputeArn] = Field(None, alias='ComputeArn')
    ComputeName: Optional[ComputeNameOrArn] = None
    Credentials: Optional[AwsCredentials] = None
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId: Optional[FleetIdOrArn] = None


class GetComputeAuthTokenOutput(BaseModel):
    AuthToken: Optional[ComputeAuthToken] = None
    ComputeArn_1: Optional[ComputeArn] = Field(None, alias='ComputeArn')
    ComputeName: Optional[ComputeNameOrArn] = None
    ExpirationTimestamp: Optional[Timestamp] = None
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId: Optional[FleetIdOrArn] = None


class GetGameSessionLogUrlOutput(BaseModel):
    PreSignedUrl: Optional[NonZeroAndMaxString] = None


class GetInstanceAccessInput(BaseModel):
    FleetId: FleetIdOrArn
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class Instance(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    Location: Optional[LocationStringModel] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    Status: Optional[InstanceStatus] = None
    Type: Optional[EC2InstanceType] = None


class InstanceCredentials(BaseModel):
    Secret: Optional[NonEmptyString] = None
    UserName: Optional[NonEmptyString] = None


class InstanceDefinition(BaseModel):
    InstanceType: GameServerGroupInstanceType
    WeightedCapacity_1: Optional[WeightedCapacity] = Field(
        None, alias='WeightedCapacity'
    )


class InstanceDefinitions(RootModel[List[InstanceDefinition]]):
    root: List[InstanceDefinition] = Field(..., max_length=20, min_length=2)


class InstanceList(RootModel[List[Instance]]):
    root: List[Instance]


class IpPermission(BaseModel):
    FromPort: PortNumber
    IpRange: NonBlankString
    Protocol: IpProtocol
    ToPort: PortNumber


class IpPermissionsList(RootModel[List[IpPermission]]):
    root: List[IpPermission] = Field(..., max_length=50)


class LatencyMap(RootModel[Optional[Dict[str, PositiveInteger]]]):
    root: Optional[Dict[str, PositiveInteger]] = None


class LaunchTemplateSpecification(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Version: Optional[LaunchTemplateVersion] = None


class ListAliasesInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    Name: Optional[NonEmptyString] = None
    NextToken: Optional[NonEmptyString] = None
    RoutingStrategyType_1: Optional[RoutingStrategyType] = Field(
        None, alias='RoutingStrategyType'
    )


class ListBuildsInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonEmptyString] = None
    Status: Optional[BuildStatus] = None


class ListBuildsOutput(BaseModel):
    Builds: Optional[BuildList] = None
    NextToken: Optional[NonEmptyString] = None


class ListComputeInput(BaseModel):
    FleetId: FleetIdOrArn
    Limit: Optional[PositiveInteger] = None
    Location: Optional[LocationStringModel] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class ListComputeOutput(BaseModel):
    ComputeList_1: Optional[ComputeList] = Field(None, alias='ComputeList')
    NextToken: Optional[NonZeroAndMaxString] = None


class ListFleetsInput(BaseModel):
    BuildId: Optional[BuildIdOrArn] = None
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    ScriptId: Optional[ScriptIdOrArn] = None


class ListFleetsOutput(BaseModel):
    FleetIds: Optional[FleetIdList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class ListGameServerGroupsInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class ListGameServersInput(BaseModel):
    GameServerGroupName: GameServerGroupNameOrArn
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonZeroAndMaxString] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListGameServersOutput(BaseModel):
    GameServers_1: Optional[GameServers] = Field(None, alias='GameServers')
    NextToken: Optional[NonZeroAndMaxString] = None


class ListLocationsInput(BaseModel):
    Filters: Optional[LocationFilterList] = None
    Limit: Optional[ListLocationsLimit] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class ListScriptsInput(BaseModel):
    Limit: Optional[PositiveInteger] = None
    NextToken: Optional[NonEmptyString] = None


class LocationConfiguration(BaseModel):
    Location: LocationStringModel


class LocationConfigurationList(RootModel[List[LocationConfiguration]]):
    root: List[LocationConfiguration] = Field(..., max_length=100, min_length=1)


class LocationList(RootModel[List[LocationStringModel]]):
    root: List[LocationStringModel] = Field(..., max_length=100, min_length=1)


class LocationModel(BaseModel):
    LocationArn: Optional[LocationArnModel] = None
    LocationName: Optional[LocationStringModel] = None


class LocationModelList(RootModel[List[LocationModel]]):
    root: List[LocationModel]


class LocationState(BaseModel):
    Location: Optional[LocationStringModel] = None
    Status: Optional[FleetStatus] = None


class LocationStateList(RootModel[List[LocationState]]):
    root: List[LocationState]


class MatchedPlayerSession(BaseModel):
    PlayerId: Optional[NonZeroAndMaxString] = None
    PlayerSessionId_1: Optional[PlayerSessionId] = Field(None, alias='PlayerSessionId')


class MatchedPlayerSessionList(RootModel[List[MatchedPlayerSession]]):
    root: List[MatchedPlayerSession]


class MatchmakingConfiguration(BaseModel):
    AcceptanceRequired: Optional[BooleanModel] = None
    AcceptanceTimeoutSeconds: Optional[MatchmakingAcceptanceTimeoutInteger] = None
    AdditionalPlayerCount: Optional[WholeNumber] = None
    BackfillMode_1: Optional[BackfillMode] = Field(None, alias='BackfillMode')
    ConfigurationArn: Optional[MatchmakingConfigurationArn] = None
    CreationTime: Optional[Timestamp] = None
    CustomEventData_1: Optional[CustomEventData] = Field(None, alias='CustomEventData')
    Description: Optional[NonZeroAndMaxString] = None
    FlexMatchMode_1: Optional[FlexMatchMode] = Field(None, alias='FlexMatchMode')
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData_1: Optional[GameSessionData] = Field(None, alias='GameSessionData')
    GameSessionQueueArns: Optional[QueueArnsList] = None
    Name: Optional[MatchmakingIdStringModel] = None
    NotificationTarget: Optional[SnsArnStringModel] = None
    RequestTimeoutSeconds: Optional[MatchmakingRequestTimeoutInteger] = None
    RuleSetArn: Optional[MatchmakingRuleSetArn] = None
    RuleSetName: Optional[MatchmakingIdStringModel] = None


class MatchmakingConfigurationList(RootModel[List[MatchmakingConfiguration]]):
    root: List[MatchmakingConfiguration]


class MatchmakingIdList(RootModel[List[MatchmakingIdStringModel]]):
    root: List[MatchmakingIdStringModel]


class MatchmakingRuleSet(BaseModel):
    CreationTime: Optional[Timestamp] = None
    RuleSetArn: Optional[MatchmakingRuleSetArn] = None
    RuleSetBody_1: RuleSetBody = Field(..., alias='RuleSetBody')
    RuleSetName: Optional[MatchmakingIdStringModel] = None


class MatchmakingRuleSetList(RootModel[List[MatchmakingRuleSet]]):
    root: List[MatchmakingRuleSet]


class PlacedPlayerSession(BaseModel):
    PlayerId: Optional[NonZeroAndMaxString] = None
    PlayerSessionId_1: Optional[PlayerSessionId] = Field(None, alias='PlayerSessionId')


class PlacedPlayerSessionList(RootModel[List[PlacedPlayerSession]]):
    root: List[PlacedPlayerSession]


class PlayerAttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class PlayerLatencyPolicy(BaseModel):
    MaximumIndividualPlayerLatencyMilliseconds: Optional[WholeNumber] = None
    PolicyDurationSeconds: Optional[WholeNumber] = None


class PlayerLatencyPolicyList(RootModel[List[PlayerLatencyPolicy]]):
    root: List[PlayerLatencyPolicy]


class PlayerSession(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    GameSessionId: Optional[NonZeroAndMaxString] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    PlayerData_1: Optional[PlayerData] = Field(None, alias='PlayerData')
    PlayerId: Optional[NonZeroAndMaxString] = None
    PlayerSessionId_1: Optional[PlayerSessionId] = Field(None, alias='PlayerSessionId')
    Port: Optional[PortNumber] = None
    Status: Optional[PlayerSessionStatus] = None
    TerminationTime: Optional[Timestamp] = None


class PlayerSessionList(RootModel[List[PlayerSession]]):
    root: List[PlayerSession]


class PriorityConfiguration(BaseModel):
    LocationOrder: Optional[LocationList] = None
    PriorityOrder: Optional[PriorityTypeList] = None


class PutScalingPolicyInput(BaseModel):
    ComparisonOperator: Optional[ComparisonOperatorType] = None
    EvaluationPeriods: Optional[PositiveInteger] = None
    FleetId: FleetIdOrArn
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: NonZeroAndMaxString
    PolicyType_1: Optional[PolicyType] = Field(None, alias='PolicyType')
    ScalingAdjustment: Optional[Integer] = None
    ScalingAdjustmentType_1: Optional[ScalingAdjustmentType] = Field(
        None, alias='ScalingAdjustmentType'
    )
    TargetConfiguration_1: Optional[TargetConfiguration] = Field(
        None, alias='TargetConfiguration'
    )
    Threshold: Optional[Double] = None


class RegisterComputeOutput(BaseModel):
    Compute_1: Optional[Compute] = Field(None, alias='Compute')


class RegisterGameServerOutput(BaseModel):
    GameServer_1: Optional[GameServer] = Field(None, alias='GameServer')


class RequestUploadCredentialsOutput(BaseModel):
    StorageLocation: Optional[S3Location] = None
    UploadCredentials: Optional[AwsCredentials] = None


class ResourceCreationLimitPolicy(BaseModel):
    NewGameSessionsPerCreator: Optional[WholeNumber] = None
    PolicyPeriodInMinutes: Optional[WholeNumber] = None


class RoutingStrategy(BaseModel):
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    Message: Optional[FreeText] = None
    Type: Optional[RoutingStrategyType] = None


class RuntimeConfiguration(BaseModel):
    GameSessionActivationTimeoutSeconds_1: Optional[
        GameSessionActivationTimeoutSeconds
    ] = Field(None, alias='GameSessionActivationTimeoutSeconds')
    MaxConcurrentGameSessionActivations_1: Optional[
        MaxConcurrentGameSessionActivations
    ] = Field(None, alias='MaxConcurrentGameSessionActivations')
    ServerProcesses: Optional[ServerProcessList] = None


class ScalingPolicy(BaseModel):
    ComparisonOperator: Optional[ComparisonOperatorType] = None
    EvaluationPeriods: Optional[PositiveInteger] = None
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    Location: Optional[LocationStringModel] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Name: Optional[NonZeroAndMaxString] = None
    PolicyType_1: Optional[PolicyType] = Field(None, alias='PolicyType')
    ScalingAdjustment: Optional[Integer] = None
    ScalingAdjustmentType_1: Optional[ScalingAdjustmentType] = Field(
        None, alias='ScalingAdjustmentType'
    )
    Status: Optional[ScalingStatusType] = None
    TargetConfiguration_1: Optional[TargetConfiguration] = Field(
        None, alias='TargetConfiguration'
    )
    Threshold: Optional[Double] = None
    UpdateStatus: Optional[LocationUpdateStatus] = None


class ScalingPolicyList(RootModel[List[ScalingPolicy]]):
    root: List[ScalingPolicy]


class Script(BaseModel):
    CreationTime: Optional[Timestamp] = None
    Name: Optional[NonZeroAndMaxString] = None
    ScriptArn_1: Optional[ScriptArn] = Field(None, alias='ScriptArn')
    ScriptId_1: Optional[ScriptId] = Field(None, alias='ScriptId')
    SizeOnDisk: Optional[PositiveLong] = None
    StorageLocation: Optional[S3Location] = None
    Version: Optional[NonZeroAndMaxString] = None


class ScriptList(RootModel[List[Script]]):
    root: List[Script]


class SearchGameSessionsOutput(BaseModel):
    GameSessions: Optional[GameSessionList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class StartGameSessionPlacementInput(BaseModel):
    DesiredPlayerSessions: Optional[DesiredPlayerSessionList] = None
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData: Optional[LargeGameSessionData] = None
    GameSessionName: Optional[NonZeroAndMaxString] = None
    GameSessionQueueName: GameSessionQueueNameOrArn
    MaximumPlayerSessionCount: WholeNumber
    PlacementId: IdStringModel
    PlayerLatencies: Optional[PlayerLatencyList] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class UpdateAliasInput(BaseModel):
    AliasId: AliasIdOrArn
    Description: Optional[NonZeroAndMaxString] = None
    Name: Optional[NonBlankAndLengthConstraintString] = None
    RoutingStrategy_1: Optional[RoutingStrategy] = Field(None, alias='RoutingStrategy')


class UpdateBuildOutput(BaseModel):
    Build_1: Optional[Build] = Field(None, alias='Build')


class UpdateFleetAttributesInput(BaseModel):
    AnywhereConfiguration_1: Optional[AnywhereConfiguration] = Field(
        None, alias='AnywhereConfiguration'
    )
    Description: Optional[NonZeroAndMaxString] = None
    FleetId: FleetIdOrArn
    MetricGroups: Optional[MetricGroupList] = None
    Name: Optional[NonZeroAndMaxString] = None
    NewGameSessionProtectionPolicy: Optional[ProtectionPolicy] = None
    ResourceCreationLimitPolicy_1: Optional[ResourceCreationLimitPolicy] = Field(
        None, alias='ResourceCreationLimitPolicy'
    )


class UpdateFleetCapacityInput(BaseModel):
    DesiredInstances: Optional[WholeNumber] = None
    FleetId: FleetIdOrArn
    Location: Optional[LocationStringModel] = None
    MaxSize: Optional[WholeNumber] = None
    MinSize: Optional[WholeNumber] = None


class UpdateFleetPortSettingsInput(BaseModel):
    FleetId: FleetIdOrArn
    InboundPermissionAuthorizations: Optional[IpPermissionsList] = None
    InboundPermissionRevocations: Optional[IpPermissionsList] = None


class UpdateGameServerGroupInput(BaseModel):
    BalancingStrategy_1: Optional[BalancingStrategy] = Field(
        None, alias='BalancingStrategy'
    )
    GameServerGroupName: GameServerGroupNameOrArn
    GameServerProtectionPolicy_1: Optional[GameServerProtectionPolicy] = Field(
        None, alias='GameServerProtectionPolicy'
    )
    InstanceDefinitions_1: Optional[InstanceDefinitions] = Field(
        None, alias='InstanceDefinitions'
    )
    RoleArn: Optional[IamRoleArn] = None


class UpdateGameServerOutput(BaseModel):
    GameServer_1: Optional[GameServer] = Field(None, alias='GameServer')


class UpdateGameSessionInput(BaseModel):
    GameSessionId: ArnStringModel
    MaximumPlayerSessionCount: Optional[WholeNumber] = None
    Name: Optional[NonZeroAndMaxString] = None
    PlayerSessionCreationPolicy_1: Optional[PlayerSessionCreationPolicy] = Field(
        None, alias='PlayerSessionCreationPolicy'
    )
    ProtectionPolicy_1: Optional[ProtectionPolicy] = Field(
        None, alias='ProtectionPolicy'
    )


class UpdateGameSessionOutput(BaseModel):
    GameSession_1: Optional[GameSession] = Field(None, alias='GameSession')


class UpdateMatchmakingConfigurationInput(BaseModel):
    AcceptanceRequired: Optional[BooleanModel] = None
    AcceptanceTimeoutSeconds: Optional[MatchmakingAcceptanceTimeoutInteger] = None
    AdditionalPlayerCount: Optional[WholeNumber] = None
    BackfillMode_1: Optional[BackfillMode] = Field(None, alias='BackfillMode')
    CustomEventData_1: Optional[CustomEventData] = Field(None, alias='CustomEventData')
    Description: Optional[NonZeroAndMaxString] = None
    FlexMatchMode_1: Optional[FlexMatchMode] = Field(None, alias='FlexMatchMode')
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData_1: Optional[GameSessionData] = Field(None, alias='GameSessionData')
    GameSessionQueueArns: Optional[QueueArnsList] = None
    Name: MatchmakingConfigurationName
    NotificationTarget: Optional[SnsArnStringModel] = None
    RequestTimeoutSeconds: Optional[MatchmakingRequestTimeoutInteger] = None
    RuleSetName: Optional[MatchmakingRuleSetName] = None


class UpdateMatchmakingConfigurationOutput(BaseModel):
    Configuration: Optional[MatchmakingConfiguration] = None


class UpdateRuntimeConfigurationInput(BaseModel):
    FleetId: FleetIdOrArn
    RuntimeConfiguration_1: RuntimeConfiguration = Field(
        ..., alias='RuntimeConfiguration'
    )


class UpdateRuntimeConfigurationOutput(BaseModel):
    RuntimeConfiguration_1: Optional[RuntimeConfiguration] = Field(
        None, alias='RuntimeConfiguration'
    )


class UpdateScriptInput(BaseModel):
    Name: Optional[NonZeroAndMaxString] = None
    ScriptId: ScriptIdOrArn
    StorageLocation: Optional[S3Location] = None
    Version: Optional[NonZeroAndMaxString] = None
    ZipFile: Optional[ZipBlob] = None


class UpdateScriptOutput(BaseModel):
    Script_1: Optional[Script] = Field(None, alias='Script')


class VpcPeeringConnection(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    GameLiftVpcId: Optional[NonZeroAndMaxString] = None
    IpV4CidrBlock: Optional[NonZeroAndMaxString] = None
    PeerVpcId: Optional[NonZeroAndMaxString] = None
    Status: Optional[VpcPeeringConnectionStatus] = None
    VpcPeeringConnectionId: Optional[NonZeroAndMaxString] = None


class VpcPeeringConnectionList(RootModel[List[VpcPeeringConnection]]):
    root: List[VpcPeeringConnection]


class Alias(BaseModel):
    AliasArn_1: Optional[AliasArn] = Field(None, alias='AliasArn')
    AliasId_1: Optional[AliasId] = Field(None, alias='AliasId')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[FreeText] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[NonBlankAndLengthConstraintString] = None
    RoutingStrategy_1: Optional[RoutingStrategy] = Field(None, alias='RoutingStrategy')


class AliasList(RootModel[List[Alias]]):
    root: List[Alias]


class ClaimGameServerOutput(BaseModel):
    GameServer_1: Optional[GameServer] = Field(None, alias='GameServer')


class CreateAliasInput(BaseModel):
    Description: Optional[NonZeroAndMaxString] = None
    Name: NonBlankAndLengthConstraintString
    RoutingStrategy_1: RoutingStrategy = Field(..., alias='RoutingStrategy')
    Tags: Optional[TagList] = None


class CreateAliasOutput(BaseModel):
    Alias_1: Optional[Alias] = Field(None, alias='Alias')


class CreateBuildInput(BaseModel):
    Name: Optional[NonZeroAndMaxString] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    ServerSdkVersion_1: Optional[ServerSdkVersion] = Field(
        None, alias='ServerSdkVersion'
    )
    StorageLocation: Optional[S3Location] = None
    Tags: Optional[TagList] = None
    Version: Optional[NonZeroAndMaxString] = None


class CreateFleetInput(BaseModel):
    AnywhereConfiguration_1: Optional[AnywhereConfiguration] = Field(
        None, alias='AnywhereConfiguration'
    )
    BuildId: Optional[BuildIdOrArn] = None
    CertificateConfiguration_1: Optional[CertificateConfiguration] = Field(
        None, alias='CertificateConfiguration'
    )
    ComputeType_1: Optional[ComputeType] = Field(None, alias='ComputeType')
    Description: Optional[NonZeroAndMaxString] = None
    EC2InboundPermissions: Optional[IpPermissionsList] = None
    EC2InstanceType_1: Optional[EC2InstanceType] = Field(None, alias='EC2InstanceType')
    FleetType_1: Optional[FleetType] = Field(None, alias='FleetType')
    InstanceRoleArn: Optional[NonEmptyString] = None
    Locations: Optional[LocationConfigurationList] = None
    LogPaths: Optional[StringList] = None
    MetricGroups: Optional[MetricGroupList] = None
    Name: NonZeroAndMaxString
    NewGameSessionProtectionPolicy: Optional[ProtectionPolicy] = None
    PeerVpcAwsAccountId: Optional[NonZeroAndMaxString] = None
    PeerVpcId: Optional[NonZeroAndMaxString] = None
    ResourceCreationLimitPolicy_1: Optional[ResourceCreationLimitPolicy] = Field(
        None, alias='ResourceCreationLimitPolicy'
    )
    RuntimeConfiguration_1: Optional[RuntimeConfiguration] = Field(
        None, alias='RuntimeConfiguration'
    )
    ScriptId: Optional[ScriptIdOrArn] = None
    ServerLaunchParameters: Optional[LaunchParametersStringModel] = None
    ServerLaunchPath: Optional[LaunchPathStringModel] = None
    Tags: Optional[TagList] = None


class CreateFleetLocationsInput(BaseModel):
    FleetId: FleetIdOrArn
    Locations: LocationConfigurationList


class CreateFleetLocationsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId: Optional[FleetIdOrArn] = None
    LocationStates: Optional[LocationStateList] = None


class CreateGameServerGroupInput(BaseModel):
    AutoScalingPolicy: Optional[GameServerGroupAutoScalingPolicy] = None
    BalancingStrategy_1: Optional[BalancingStrategy] = Field(
        None, alias='BalancingStrategy'
    )
    GameServerGroupName_1: GameServerGroupName = Field(..., alias='GameServerGroupName')
    GameServerProtectionPolicy_1: Optional[GameServerProtectionPolicy] = Field(
        None, alias='GameServerProtectionPolicy'
    )
    InstanceDefinitions_1: InstanceDefinitions = Field(..., alias='InstanceDefinitions')
    LaunchTemplate: LaunchTemplateSpecification
    MaxSize: PositiveInteger
    MinSize: WholeNumber
    RoleArn: IamRoleArn
    Tags: Optional[TagList] = None
    VpcSubnets_1: Optional[VpcSubnets] = Field(None, alias='VpcSubnets')


class CreateGameSessionInput(BaseModel):
    AliasId: Optional[AliasIdOrArn] = None
    CreatorId: Optional[NonZeroAndMaxString] = None
    FleetId: Optional[FleetIdOrArn] = None
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData: Optional[LargeGameSessionData] = None
    GameSessionId: Optional[IdStringModel] = None
    IdempotencyToken: Optional[IdStringModel] = None
    Location: Optional[LocationStringModel] = None
    MaximumPlayerSessionCount: WholeNumber
    Name: Optional[NonZeroAndMaxString] = None


class CreateGameSessionOutput(BaseModel):
    GameSession_1: Optional[GameSession] = Field(None, alias='GameSession')


class CreateLocationInput(BaseModel):
    LocationName: CustomInputLocationStringModel
    Tags: Optional[TagList] = None


class CreateLocationOutput(BaseModel):
    Location: Optional[LocationModel] = None


class CreateMatchmakingConfigurationInput(BaseModel):
    AcceptanceRequired: BooleanModel
    AcceptanceTimeoutSeconds: Optional[MatchmakingAcceptanceTimeoutInteger] = None
    AdditionalPlayerCount: Optional[WholeNumber] = None
    BackfillMode_1: Optional[BackfillMode] = Field(None, alias='BackfillMode')
    CustomEventData_1: Optional[CustomEventData] = Field(None, alias='CustomEventData')
    Description: Optional[NonZeroAndMaxString] = None
    FlexMatchMode_1: Optional[FlexMatchMode] = Field(None, alias='FlexMatchMode')
    GameProperties: Optional[GamePropertyList] = None
    GameSessionData_1: Optional[GameSessionData] = Field(None, alias='GameSessionData')
    GameSessionQueueArns: Optional[QueueArnsList] = None
    Name: MatchmakingIdStringModel
    NotificationTarget: Optional[SnsArnStringModel] = None
    RequestTimeoutSeconds: MatchmakingRequestTimeoutInteger
    RuleSetName: MatchmakingRuleSetName
    Tags: Optional[TagList] = None


class CreateMatchmakingConfigurationOutput(BaseModel):
    Configuration: Optional[MatchmakingConfiguration] = None


class CreateMatchmakingRuleSetInput(BaseModel):
    Name: MatchmakingIdStringModel
    RuleSetBody_1: RuleSetBody = Field(..., alias='RuleSetBody')
    Tags: Optional[TagList] = None


class CreateMatchmakingRuleSetOutput(BaseModel):
    RuleSet: MatchmakingRuleSet


class CreatePlayerSessionOutput(BaseModel):
    PlayerSession_1: Optional[PlayerSession] = Field(None, alias='PlayerSession')


class CreatePlayerSessionsOutput(BaseModel):
    PlayerSessions: Optional[PlayerSessionList] = None


class CreateScriptInput(BaseModel):
    Name: Optional[NonZeroAndMaxString] = None
    StorageLocation: Optional[S3Location] = None
    Tags: Optional[TagList] = None
    Version: Optional[NonZeroAndMaxString] = None
    ZipFile: Optional[ZipBlob] = None


class CreateScriptOutput(BaseModel):
    Script_1: Optional[Script] = Field(None, alias='Script')


class DeleteFleetLocationsInput(BaseModel):
    FleetId: FleetIdOrArn
    Locations: LocationList


class DeleteFleetLocationsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId: Optional[FleetIdOrArn] = None
    LocationStates: Optional[LocationStateList] = None


class DescribeAliasOutput(BaseModel):
    Alias_1: Optional[Alias] = Field(None, alias='Alias')


class DescribeEC2InstanceLimitsOutput(BaseModel):
    EC2InstanceLimits: Optional[EC2InstanceLimitList] = None


class DescribeFleetCapacityOutput(BaseModel):
    FleetCapacity: Optional[FleetCapacityList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetEventsOutput(BaseModel):
    Events: Optional[EventList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetLocationAttributesInput(BaseModel):
    FleetId: FleetIdOrArn
    Limit: Optional[PositiveInteger] = None
    Locations: Optional[LocationList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetLocationCapacityOutput(BaseModel):
    FleetCapacity_1: Optional[FleetCapacity] = Field(None, alias='FleetCapacity')


class DescribeFleetLocationUtilizationOutput(BaseModel):
    FleetUtilization_1: Optional[FleetUtilization] = Field(
        None, alias='FleetUtilization'
    )


class DescribeFleetPortSettingsOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    InboundPermissions: Optional[IpPermissionsList] = None
    Location: Optional[LocationStringModel] = None
    UpdateStatus: Optional[LocationUpdateStatus] = None


class DescribeFleetUtilizationOutput(BaseModel):
    FleetUtilization: Optional[FleetUtilizationList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameServerInstancesOutput(BaseModel):
    GameServerInstances_1: Optional[GameServerInstances] = Field(
        None, alias='GameServerInstances'
    )
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameServerOutput(BaseModel):
    GameServer_1: Optional[GameServer] = Field(None, alias='GameServer')


class DescribeGameSessionDetailsOutput(BaseModel):
    GameSessionDetails: Optional[GameSessionDetailList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameSessionsOutput(BaseModel):
    GameSessions: Optional[GameSessionList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeInstancesOutput(BaseModel):
    Instances: Optional[InstanceList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeMatchmakingConfigurationsOutput(BaseModel):
    Configurations: Optional[MatchmakingConfigurationList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeMatchmakingInput(BaseModel):
    TicketIds: MatchmakingIdList


class DescribeMatchmakingRuleSetsOutput(BaseModel):
    NextToken: Optional[NonZeroAndMaxString] = None
    RuleSets: MatchmakingRuleSetList


class DescribePlayerSessionsOutput(BaseModel):
    NextToken: Optional[NonZeroAndMaxString] = None
    PlayerSessions: Optional[PlayerSessionList] = None


class DescribeRuntimeConfigurationOutput(BaseModel):
    RuntimeConfiguration_1: Optional[RuntimeConfiguration] = Field(
        None, alias='RuntimeConfiguration'
    )


class DescribeScalingPoliciesOutput(BaseModel):
    NextToken: Optional[NonZeroAndMaxString] = None
    ScalingPolicies: Optional[ScalingPolicyList] = None


class DescribeScriptOutput(BaseModel):
    Script_1: Optional[Script] = Field(None, alias='Script')


class DescribeVpcPeeringConnectionsOutput(BaseModel):
    VpcPeeringConnections: Optional[VpcPeeringConnectionList] = None


class FilterConfiguration(BaseModel):
    AllowedLocations: Optional[LocationList] = None


class FleetAttributes(BaseModel):
    AnywhereConfiguration_1: Optional[AnywhereConfiguration] = Field(
        None, alias='AnywhereConfiguration'
    )
    BuildArn_1: Optional[BuildArn] = Field(None, alias='BuildArn')
    BuildId_1: Optional[BuildId] = Field(None, alias='BuildId')
    CertificateConfiguration_1: Optional[CertificateConfiguration] = Field(
        None, alias='CertificateConfiguration'
    )
    ComputeType_1: Optional[ComputeType] = Field(None, alias='ComputeType')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[NonZeroAndMaxString] = None
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    FleetType_1: Optional[FleetType] = Field(None, alias='FleetType')
    InstanceRoleArn: Optional[NonEmptyString] = None
    InstanceType: Optional[EC2InstanceType] = None
    LogPaths: Optional[StringList] = None
    MetricGroups: Optional[MetricGroupList] = None
    Name: Optional[NonZeroAndMaxString] = None
    NewGameSessionProtectionPolicy: Optional[ProtectionPolicy] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    ResourceCreationLimitPolicy_1: Optional[ResourceCreationLimitPolicy] = Field(
        None, alias='ResourceCreationLimitPolicy'
    )
    ScriptArn_1: Optional[ScriptArn] = Field(None, alias='ScriptArn')
    ScriptId_1: Optional[ScriptId] = Field(None, alias='ScriptId')
    ServerLaunchParameters: Optional[LaunchParametersStringModel] = None
    ServerLaunchPath: Optional[LaunchPathStringModel] = None
    Status: Optional[FleetStatus] = None
    StoppedActions: Optional[FleetActionList] = None
    TerminationTime: Optional[Timestamp] = None


class FleetAttributesList(RootModel[List[FleetAttributes]]):
    root: List[FleetAttributes]


class GameServerGroup(BaseModel):
    AutoScalingGroupArn_1: Optional[AutoScalingGroupArn] = Field(
        None, alias='AutoScalingGroupArn'
    )
    BalancingStrategy_1: Optional[BalancingStrategy] = Field(
        None, alias='BalancingStrategy'
    )
    CreationTime: Optional[Timestamp] = None
    GameServerGroupArn_1: Optional[GameServerGroupArn] = Field(
        None, alias='GameServerGroupArn'
    )
    GameServerGroupName_1: Optional[GameServerGroupName] = Field(
        None, alias='GameServerGroupName'
    )
    GameServerProtectionPolicy_1: Optional[GameServerProtectionPolicy] = Field(
        None, alias='GameServerProtectionPolicy'
    )
    InstanceDefinitions_1: Optional[InstanceDefinitions] = Field(
        None, alias='InstanceDefinitions'
    )
    LastUpdatedTime: Optional[Timestamp] = None
    RoleArn: Optional[IamRoleArn] = None
    Status: Optional[GameServerGroupStatus] = None
    StatusReason: Optional[NonZeroAndMaxString] = None
    SuspendedActions: Optional[GameServerGroupActions] = None


class GameServerGroups(RootModel[List[GameServerGroup]]):
    root: List[GameServerGroup]


class GameSessionConnectionInfo(BaseModel):
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    GameSessionArn: Optional[ArnStringModel] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    MatchedPlayerSessions: Optional[MatchedPlayerSessionList] = None
    Port: Optional[PositiveInteger] = None


class GameSessionPlacement(BaseModel):
    DnsName_1: Optional[DnsName] = Field(None, alias='DnsName')
    EndTime: Optional[Timestamp] = None
    GameProperties: Optional[GamePropertyList] = None
    GameSessionArn: Optional[NonZeroAndMaxString] = None
    GameSessionData: Optional[LargeGameSessionData] = None
    GameSessionId: Optional[NonZeroAndMaxString] = None
    GameSessionName: Optional[NonZeroAndMaxString] = None
    GameSessionQueueName_1: Optional[GameSessionQueueName] = Field(
        None, alias='GameSessionQueueName'
    )
    GameSessionRegion: Optional[NonZeroAndMaxString] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    MatchmakerData_1: Optional[MatchmakerData] = Field(None, alias='MatchmakerData')
    MaximumPlayerSessionCount: Optional[WholeNumber] = None
    PlacedPlayerSessions: Optional[PlacedPlayerSessionList] = None
    PlacementId: Optional[IdStringModel] = None
    PlayerLatencies: Optional[PlayerLatencyList] = None
    Port: Optional[PortNumber] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[GameSessionPlacementState] = None


class GameSessionQueue(BaseModel):
    CustomEventData: Optional[QueueCustomEventData] = None
    Destinations: Optional[GameSessionQueueDestinationList] = None
    FilterConfiguration_1: Optional[FilterConfiguration] = Field(
        None, alias='FilterConfiguration'
    )
    GameSessionQueueArn_1: Optional[GameSessionQueueArn] = Field(
        None, alias='GameSessionQueueArn'
    )
    Name: Optional[GameSessionQueueName] = None
    NotificationTarget: Optional[QueueSnsArnStringModel] = None
    PlayerLatencyPolicies: Optional[PlayerLatencyPolicyList] = None
    PriorityConfiguration_1: Optional[PriorityConfiguration] = Field(
        None, alias='PriorityConfiguration'
    )
    TimeoutInSeconds: Optional[WholeNumber] = None


class GameSessionQueueList(RootModel[List[GameSessionQueue]]):
    root: List[GameSessionQueue]


class InstanceAccess(BaseModel):
    Credentials: Optional[InstanceCredentials] = None
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')


class ListAliasesOutput(BaseModel):
    Aliases: Optional[AliasList] = None
    NextToken: Optional[NonEmptyString] = None


class ListGameServerGroupsOutput(BaseModel):
    GameServerGroups_1: Optional[GameServerGroups] = Field(
        None, alias='GameServerGroups'
    )
    NextToken: Optional[NonZeroAndMaxString] = None


class ListLocationsOutput(BaseModel):
    Locations: Optional[LocationModelList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class ListScriptsOutput(BaseModel):
    NextToken: Optional[NonEmptyString] = None
    Scripts: Optional[ScriptList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class LocationAttributes(BaseModel):
    LocationState_1: Optional[LocationState] = Field(None, alias='LocationState')
    StoppedActions: Optional[FleetActionList] = None
    UpdateStatus: Optional[LocationUpdateStatus] = None


class LocationAttributesList(RootModel[List[LocationAttributes]]):
    root: List[LocationAttributes]


class Player(BaseModel):
    LatencyInMs: Optional[LatencyMap] = None
    PlayerAttributes: Optional[PlayerAttributeMap] = None
    PlayerId: Optional[NonZeroAndMaxString] = None
    Team: Optional[NonZeroAndMaxString] = None


class PlayerList(RootModel[List[Player]]):
    root: List[Player]


class ResumeGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class StartGameSessionPlacementOutput(BaseModel):
    GameSessionPlacement_1: Optional[GameSessionPlacement] = Field(
        None, alias='GameSessionPlacement'
    )


class StartMatchBackfillInput(BaseModel):
    ConfigurationName: MatchmakingConfigurationName
    GameSessionArn: Optional[ArnStringModel] = None
    Players: PlayerList
    TicketId: Optional[MatchmakingIdStringModel] = None


class StartMatchmakingInput(BaseModel):
    ConfigurationName: MatchmakingConfigurationName
    Players: PlayerList
    TicketId: Optional[MatchmakingIdStringModel] = None


class StopGameSessionPlacementOutput(BaseModel):
    GameSessionPlacement_1: Optional[GameSessionPlacement] = Field(
        None, alias='GameSessionPlacement'
    )


class SuspendGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class UpdateAliasOutput(BaseModel):
    Alias_1: Optional[Alias] = Field(None, alias='Alias')


class UpdateGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class UpdateGameSessionQueueInput(BaseModel):
    CustomEventData: Optional[QueueCustomEventData] = None
    Destinations: Optional[GameSessionQueueDestinationList] = None
    FilterConfiguration_1: Optional[FilterConfiguration] = Field(
        None, alias='FilterConfiguration'
    )
    Name: GameSessionQueueNameOrArn
    NotificationTarget: Optional[QueueSnsArnStringModel] = None
    PlayerLatencyPolicies: Optional[PlayerLatencyPolicyList] = None
    PriorityConfiguration_1: Optional[PriorityConfiguration] = Field(
        None, alias='PriorityConfiguration'
    )
    TimeoutInSeconds: Optional[WholeNumber] = None


class UpdateGameSessionQueueOutput(BaseModel):
    GameSessionQueue_1: Optional[GameSessionQueue] = Field(
        None, alias='GameSessionQueue'
    )


class CreateFleetOutput(BaseModel):
    FleetAttributes_1: Optional[FleetAttributes] = Field(None, alias='FleetAttributes')
    LocationStates: Optional[LocationStateList] = None


class CreateGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class CreateGameSessionQueueInput(BaseModel):
    CustomEventData: Optional[QueueCustomEventData] = None
    Destinations: Optional[GameSessionQueueDestinationList] = None
    FilterConfiguration_1: Optional[FilterConfiguration] = Field(
        None, alias='FilterConfiguration'
    )
    Name: GameSessionQueueName
    NotificationTarget: Optional[QueueSnsArnStringModel] = None
    PlayerLatencyPolicies: Optional[PlayerLatencyPolicyList] = None
    PriorityConfiguration_1: Optional[PriorityConfiguration] = Field(
        None, alias='PriorityConfiguration'
    )
    Tags: Optional[TagList] = None
    TimeoutInSeconds: Optional[WholeNumber] = None


class CreateGameSessionQueueOutput(BaseModel):
    GameSessionQueue_1: Optional[GameSessionQueue] = Field(
        None, alias='GameSessionQueue'
    )


class DeleteGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class DescribeFleetAttributesOutput(BaseModel):
    FleetAttributes: Optional[FleetAttributesList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeFleetLocationAttributesOutput(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetId: Optional[FleetIdOrArn] = None
    LocationAttributes: Optional[LocationAttributesList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class DescribeGameServerGroupOutput(BaseModel):
    GameServerGroup_1: Optional[GameServerGroup] = Field(None, alias='GameServerGroup')


class DescribeGameSessionPlacementOutput(BaseModel):
    GameSessionPlacement_1: Optional[GameSessionPlacement] = Field(
        None, alias='GameSessionPlacement'
    )


class DescribeGameSessionQueuesOutput(BaseModel):
    GameSessionQueues: Optional[GameSessionQueueList] = None
    NextToken: Optional[NonZeroAndMaxString] = None


class GetInstanceAccessOutput(BaseModel):
    InstanceAccess_1: Optional[InstanceAccess] = Field(None, alias='InstanceAccess')


class MatchmakingTicket(BaseModel):
    ConfigurationArn: Optional[MatchmakingConfigurationArn] = None
    ConfigurationName: Optional[MatchmakingIdStringModel] = None
    EndTime: Optional[Timestamp] = None
    EstimatedWaitTime: Optional[WholeNumber] = None
    GameSessionConnectionInfo_1: Optional[GameSessionConnectionInfo] = Field(
        None, alias='GameSessionConnectionInfo'
    )
    Players: Optional[PlayerList] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[MatchmakingConfigurationStatus] = None
    StatusMessage: Optional[StringModel] = None
    StatusReason: Optional[StringModel] = None
    TicketId: Optional[MatchmakingIdStringModel] = None


class MatchmakingTicketList(RootModel[List[MatchmakingTicket]]):
    root: List[MatchmakingTicket]


class StartMatchBackfillOutput(BaseModel):
    MatchmakingTicket_1: Optional[MatchmakingTicket] = Field(
        None, alias='MatchmakingTicket'
    )


class StartMatchmakingOutput(BaseModel):
    MatchmakingTicket_1: Optional[MatchmakingTicket] = Field(
        None, alias='MatchmakingTicket'
    )


class DescribeMatchmakingOutput(BaseModel):
    TicketList: Optional[MatchmakingTicketList] = None
